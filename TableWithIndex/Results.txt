Результаты тестирования

SQLTest
подготовка, загрузка, индекс 1, индекс 2, выборка записей по 10 идентификторам (мс.)
После перезагрузки:
7470, 5957, 397, 153, 46, 14
В стационарном режиме (после нескольких прогонов): 
121, 3332, 47, 143, -, 16 
458, 3629, 48, 64, 3, 6

Без загрузки и индексации:
После перезагрузки
7342, 246
443, 55

После нескольких прогонов
303, 28
459, 52
306, 13

PolarTest
Загрузка данных 110 мс.
Построение индекса 288 мс.
109, 226
Использование вместо Sort() SortComparison() дало 4.8 сек.
Добавим время первого пропуска и суммарное время 10 поисков
112, 223, 7, 8
108, 225, 6, 7
Если убрать вывод в Console
106, 223, 5, 2
107, 225, 4, 2

После перезагрузки
112, 226, 5, 2
Если без создания ячейки и индексации
27, 2
Даже с выдачей записей на консоль
42, 4
30, 3

Теперь я сделаю работу со всеми записями, имеющими поле name
Получились результаты:
SQLTest
597, 8991, 482, 4, 12
3934, 7938, 573, 5, 14
Count()=35572

Теперь буду загружать файл tm.xml

SQLTest

Подготовка, загрузка, индексирование, первый Select, 10 Select'ов
8.8 сек., 26 сек., 1.2 сек., 4 мс., 13 мс.
Всего записей 118287
Еще раз:
1.1, 17, 583 мс., 3, 7
размер базы данных 63 Мб.

PolarTest

-, 358 мс., 2262 мс., 6, 5
Объем базы данных: 7.7 Мб + 8.1 Мб (индекс)
-, 346, 2278, 7, 5
Число записей 123002

SQLTest

11 сек., 20.9 сек., 1117, 5, 14
Количество записей - то же: 123002
Размер БД все тот же: 63 Мб.

Итак, пробежуточные выводы. PolarDB проигрывает (в некоторых режимах) MS SQL при индексации. Но сильно выигрывает при
холодном старте и при загрузке. Снова проведу эксперименты, только без загрузки.

Тест без загрузки
-, -, 12.5 сек.(!), 85 мс.
Повторно:
9.6 сек., 227 мс.
1.2, 85
1.0, 86
5.3, 671 мс.
Последний результат получен после сброса sqlservr.exe

PolarTest (без загрузки)

31 мс., 5 мс.
30, 4

=======================
Заменил схему индексации
Тест SemiIndex
загрузка 900 мс.
первый GetById 12 мс.
10 GetById 2 мс.

Без загрузки:
33, 3
поиск по текстовому образцу 5 мс.

На рабочем компьютере
690, 7, 3
717, 15, 0, 0

Без загрузки
-, 19, 1, 4
-, 15, 0, 0

Для двухмиллионника:
5480, 9, 6, 7
5264, 9, 23, 7

Без загрузки
-, 31, 5, 6
-, 30, 6, 7

Более или менее стабильно. Правда флуктуации имеются и могут повлиять на изменения. Но все же надо попробовать другую схему.

FreeIndex test
Загрузка 522. 
для двухмиллионника загрузка 1.8 сек. (Наверное надо радоваться!)

Вроде начинает работать
для 0001.xml
без загрузки -, 21, 4
_, 18, 2 (регулярно)

С загрузкой
513, 2, 2

Для двухмиллионника
1706, 2, 3

Сделал новый вариант индексов для id.
0001.xml:
загрузка 191, индексирование (один индекс) 585, первое чтение по id 2, 10 чтений по id 2

Двухмиллионник
404, 2118, 2, 3

Причем дополнительно, xml-файл загружался секунд 12. 

Без загрузки и индексации:
-, -, 19, 3

Вполне приличные результаты.

С вычислением двух индексов и поиском по образцу
0001.xml
168, 1243, 1, 1, 13
191, 1267, 3, 2, 12

=================
План доведения индекса до демонстабельного состояния.
+1. Подкорректировать название и сигнатуру методов класса FreeIndex
*2. Сформировать соглашение о том, что deleted является первым (нулевым) полем, подкорректировать индексы и определения
*3. Сделать использование deleted в методах доступа
4. Сделать и проверить методы Delete, Replace, Append (может назвать его Insert?).
5. Сделать и проверить общую композицию индекса. Поскольку таблица может быть единой, и индекс не надо множить по размерам.

Добавил фильтрацию вводимых (Load) в индекс данных по признаку deleted. Время индексации увеличилось до 1600-1800. Может
надо добавить метод типа GetObject  

Эксперимент с 1 млн. целых чисел.

Загрузка 435 мс.
Создание индекса 11547 мс. (11.5 сек.)
Первый поиск 5 мс.
10 поисков 4 мс.

Без загрузки (при подсоединении к готовым файлам)
Первый поиск 20 мс.
10 следующих поисков 4 мс.

Случается какая-то заторможенность. Обычно это после долгого "висения" и неиспользования студии. Сейчас в прогоне получилось:
3405, 14302, 41, 8
повторно:
380, 11743, 5, 4

Фиксирую результаты прогона теста rdfengine
11, 3, 22, 1, 16, 130, 489 (Это после многократных исполнений)
После практически "холодного" старта (я не запускал программу 2 часа и VS была выключена) результаты удручают:
523, 910, 32, 0, 1213, 13623, 73765 (!)
При повторном запуске, хорошие результаты возобновились.
Снова после холодного старта, были отклонения от "стандарта", но... только в последнем времени (?). Получилось 8.3 сек.
Надеюсь, на серевере, времена обработки будут весьти себя и регулярнее и предсказуемее.

Теперь вернусь к разработке индекса. Надо сделать: два индексных массива, добавление и уничтожение записей.






