//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Admin\Source\Repos\PolarDemo\SparqlParseRun\sparql2PacNS.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SparqlParseRun {

	using System;
	using System.Linq;
	using System.Xml.Linq;		
	using System.Text.RegularExpressions;
    using SparqlParseRun;
	using RdfInMemoryCopy;
	using System.Linq.Expressions;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class sparql2PacNSParser : Parser {
	public const int
		T__72=1, T__71=2, T__70=3, T__69=4, T__68=5, T__67=6, T__66=7, T__65=8, 
		T__64=9, T__63=10, T__62=11, T__61=12, T__60=13, T__59=14, T__58=15, T__57=16, 
		T__56=17, T__55=18, T__54=19, T__53=20, T__52=21, T__51=22, T__50=23, 
		T__49=24, T__48=25, T__47=26, T__46=27, T__45=28, T__44=29, T__43=30, 
		T__42=31, T__41=32, T__40=33, T__39=34, T__38=35, T__37=36, T__36=37, 
		T__35=38, T__34=39, T__33=40, T__32=41, T__31=42, T__30=43, T__29=44, 
		T__28=45, T__27=46, T__26=47, T__25=48, T__24=49, T__23=50, T__22=51, 
		T__21=52, T__20=53, T__19=54, T__18=55, T__17=56, T__16=57, T__15=58, 
		T__14=59, T__13=60, T__12=61, T__11=62, T__10=63, T__9=64, T__8=65, T__7=66, 
		T__6=67, T__5=68, T__4=69, T__3=70, T__2=71, T__1=72, T__0=73, PNAME_NS=74, 
		PREFIXED_NAME=75, NumericLiteralPositive=76, NumericLiteralNegative=77, 
		BooleanLiteral=78, String=79, BlankNode=80, IRI_REF=81, BLANK_NODE_LABEL=82, 
		VAR1=83, VAR2=84, LANGTAG=85, INTEGER=86, DECIMAL=87, DOUBLE=88, INTEGER_POSITIVE=89, 
		DECIMAL_POSITIVE=90, DOUBLE_POSITIVE=91, INTEGER_NEGATIVE=92, DECIMAL_NEGATIVE=93, 
		DOUBLE_NEGATIVE=94, EXPONENT=95, STRING_LITERAL1=96, STRING_LITERAL2=97, 
		STRING_LITERAL_LONG1=98, STRING_LITERAL_LONG2=99, ECHAR=100, NIL=101, 
		WS=102, ANON=103, PN_CHARS_BASE=104, PN_CHARS_U=105, VARNAME=106, PN_CHARS=107, 
		PN_PREFIX=108, PN_LOCAL=109;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'DISTINCT'", "'isBLANK'", "'Langmatches'", "'['", "'WHERE'", 
		"'*'", "'FILTER'", "'<'", "'isIRI'", "'!='", "'<='", "'REGEX'", "'}'", 
		"'^^'", "'ORDER'", "'PREFIX'", "'LANGMATCHES'", "'langmatches'", "')'", 
		"'regex'", "'\"*\"'", "'BOUND'", "'Bound'", "'langMatches'", "'DESC'", 
		"'='", "'DATATYPE'", "'STR'", "'dataType'", "'BASE'", "'datatype'", "'FROM'", 
		"'sameTerm'", "'str'", "'!'", "'SELECT'", "']'", "'OPTIONAL'", "'BY'", 
		"','", "'OFFSET'", "'ASC'", "'-'", "'('", "'Datatype'", "'DataType'", 
		"'LangMatches'", "'isURI'", "'{'", "'bound'", "'isLITERAL'", "'Lang'", 
		"'ASK'", "'GRAPH'", "'a'", "'.'", "'REDUCED'", "'+'", "';'", "'CONSTRUCT'", 
		"'lang'", "'LANG'", "'&&'", "'||'", "'>'", "'Regex'", "'DESCRIBE'", "'LIMIT'", 
		"'/'", "'>='", "'Str'", "'UNION'", "'NAMED'", "PNAME_NS", "PREFIXED_NAME", 
		"NumericLiteralPositive", "NumericLiteralNegative", "BooleanLiteral", 
		"String", "BlankNode", "IRI_REF", "BLANK_NODE_LABEL", "VAR1", "VAR2", 
		"LANGTAG", "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", 
		"DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", 
		"EXPONENT", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", 
		"STRING_LITERAL_LONG2", "ECHAR", "NIL", "WS", "ANON", "PN_CHARS_BASE", 
		"PN_CHARS_U", "VARNAME", "PN_CHARS", "PN_PREFIX", "PN_LOCAL"
	};
	public const int
		RULE_query = 0, RULE_prologue = 1, RULE_basedecl = 2, RULE_prefixDecl = 3, 
		RULE_selectQuery = 4, RULE_constructQuery = 5, RULE_describeQuery = 6, 
		RULE_askQuery = 7, RULE_datasetClause = 8, RULE_defaultGraphClause = 9, 
		RULE_namedGraphClause = 10, RULE_sourceSelector = 11, RULE_whereClause = 12, 
		RULE_solutionModifier = 13, RULE_limitOffsetClauses = 14, RULE_orderClause = 15, 
		RULE_orderCondition = 16, RULE_limitClause = 17, RULE_offsetClause = 18, 
		RULE_groupGraphPattern = 19, RULE_triplesBlock = 20, RULE_graphPatternNotTriples = 21, 
		RULE_optionalGraphPattern = 22, RULE_graphGraphPattern = 23, RULE_groupOrUnionGraphPattern = 24, 
		RULE_filter = 25, RULE_constraint = 26, RULE_functionCall = 27, RULE_argList = 28, 
		RULE_constructTemplate = 29, RULE_constructTriples = 30, RULE_triplesSameSubject = 31, 
		RULE_propertyListNotEmpty = 32, RULE_propertyList = 33, RULE_verbObjectList = 34, 
		RULE_objectList = 35, RULE_verb = 36, RULE_triplesNode = 37, RULE_blankNodePropertyList = 38, 
		RULE_collection = 39, RULE_graphNode = 40, RULE_varOrTermSub = 41, RULE_varOrTerm = 42, 
		RULE_varOrIRIref = 43, RULE_var = 44, RULE_varLiteral = 45, RULE_graphTerm = 46, 
		RULE_expression = 47, RULE_conditionalAndExpression = 48, RULE_valueLogical = 49, 
		RULE_additiveExpression = 50, RULE_multiplicativeExpression = 51, RULE_unaryExpression = 52, 
		RULE_primaryExpression = 53, RULE_brackettedExpression = 54, RULE_builtInCall = 55, 
		RULE_regexExpression = 56, RULE_iRIrefOrFunction = 57, RULE_rDFLiteral = 58, 
		RULE_iRIref = 59, RULE_numeric = 60, RULE_numericLiteral = 61, RULE_numericLiteralUnsigned = 62;
	public static readonly string[] ruleNames = {
		"query", "prologue", "basedecl", "prefixDecl", "selectQuery", "constructQuery", 
		"describeQuery", "askQuery", "datasetClause", "defaultGraphClause", "namedGraphClause", 
		"sourceSelector", "whereClause", "solutionModifier", "limitOffsetClauses", 
		"orderClause", "orderCondition", "limitClause", "offsetClause", "groupGraphPattern", 
		"triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", "graphGraphPattern", 
		"groupOrUnionGraphPattern", "filter", "constraint", "functionCall", "argList", 
		"constructTemplate", "constructTriples", "triplesSameSubject", "propertyListNotEmpty", 
		"propertyList", "verbObjectList", "objectList", "verb", "triplesNode", 
		"blankNodePropertyList", "collection", "graphNode", "varOrTermSub", "varOrTerm", 
		"varOrIRIref", "var", "varLiteral", "graphTerm", "expression", "conditionalAndExpression", 
		"valueLogical", "additiveExpression", "multiplicativeExpression", "unaryExpression", 
		"primaryExpression", "brackettedExpression", "builtInCall", "regexExpression", 
		"iRIrefOrFunction", "rDFLiteral", "iRIref", "numeric", "numericLiteral", 
		"numericLiteralUnsigned"
	};

	public override string GrammarFileName { get { return "sparql2PacNS.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

			  	

	public static Regex PrefixNSSlpit=new Regex("^([^:]*:)(.*)$");
	public SparqlQuery q;		

	public sparql2PacNSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class QueryContext : ParserRuleContext {
		public AskQueryContext askQuery() {
			return GetRuleContext<AskQueryContext>(0);
		}
		public DescribeQueryContext describeQuery() {
			return GetRuleContext<DescribeQueryContext>(0);
		}
		public PrologueContext prologue() {
			return GetRuleContext<PrologueContext>(0);
		}
		public ConstructQueryContext constructQuery() {
			return GetRuleContext<ConstructQueryContext>(0);
		}
		public SelectQueryContext selectQuery() {
			return GetRuleContext<SelectQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_query; }
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; prologue();
			State = 131;
			switch (_input.La(1)) {
			case 36:
				{
				State = 127; selectQuery();
				}
				break;
			case 60:
				{
				State = 128; constructQuery();
				}
				break;
			case 67:
				{
				State = 129; describeQuery();
				}
				break;
			case 53:
				{
				State = 130; askQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologueContext : ParserRuleContext {
		public PrefixDeclContext prefixDecl(int i) {
			return GetRuleContext<PrefixDeclContext>(i);
		}
		public BasedeclContext basedecl() {
			return GetRuleContext<BasedeclContext>(0);
		}
		public IReadOnlyList<PrefixDeclContext> prefixDecl() {
			return GetRuleContexts<PrefixDeclContext>();
		}
		public PrologueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prologue; }
	}

	[RuleVersion(0)]
	public PrologueContext prologue() {
		PrologueContext _localctx = new PrologueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_prologue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = _input.La(1);
			if (_la==30) {
				{
				State = 133; basedecl();
				}
			}

			State = 139;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==16) {
				{
				{
				State = 136; prefixDecl();
				}
				}
				State = 141;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasedeclContext : ParserRuleContext {
		public ITerminalNode IRI_REF() { return GetToken(sparql2PacNSParser.IRI_REF, 0); }
		public BasedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_basedecl; }
	}

	[RuleVersion(0)]
	public BasedeclContext basedecl() {
		BasedeclContext _localctx = new BasedeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_basedecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(30);
			State = 143; Match(IRI_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixDeclContext : ParserRuleContext {
		public IToken _PNAME_NS;
		public IToken _IRI_REF;
		public ITerminalNode IRI_REF() { return GetToken(sparql2PacNSParser.IRI_REF, 0); }
		public ITerminalNode PNAME_NS() { return GetToken(sparql2PacNSParser.PNAME_NS, 0); }
		public PrefixDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefixDecl; }
	}

	[RuleVersion(0)]
	public PrefixDeclContext prefixDecl() {
		PrefixDeclContext _localctx = new PrefixDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_prefixDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(16);
			State = 146; _localctx._PNAME_NS = Match(PNAME_NS);
			State = 147; _localctx._IRI_REF = Match(IRI_REF);
			 	
				var iri=(_localctx._IRI_REF!=null?_localctx._IRI_REF.Text:null);
				iri=iri.Substring(1,iri.Length-2);
				q.prefixes.Add((_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null), iri);	
			 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryContext : ParserRuleContext {
		public VarLiteralContext _varLiteral;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public IReadOnlyList<VarLiteralContext> varLiteral() {
			return GetRuleContexts<VarLiteralContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public VarLiteralContext varLiteral(int i) {
			return GetRuleContext<VarLiteralContext>(i);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selectQuery; }
	}

	[RuleVersion(0)]
	public SelectQueryContext selectQuery() {
		SelectQueryContext _localctx = new SelectQueryContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_selectQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(36);
			State = 155;
			switch (_input.La(1)) {
			case 1:
				{
				State = 151; Match(1);
				 q.isDistinct=true;	
				}
				break;
			case 57:
				{
				State = 153; Match(57);
				 q.isReduce=true;	
				}
				break;
			case 6:
			case VAR1:
			case VAR2:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 166;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				{
				State = 160;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 157; _localctx._varLiteral = varLiteral();
					 q.variables.Add((_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null));	 
					}
					}
					State = 162;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR1 || _la==VAR2 );
				}
				break;
			case 6:
				{
				State = 164; Match(6);
				 q.all=true;	
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 171;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 168; datasetClause();
				}
				}
				State = 173;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 174; whereClause();
			State = 175; solutionModifier();
			   q.ResultSet.ResultType=ResultType.Select;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructQueryContext : ParserRuleContext {
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public ConstructTemplateContext constructTemplate() {
			return GetRuleContext<ConstructTemplateContext>(0);
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public ConstructQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructQuery; }
	}

	[RuleVersion(0)]
	public ConstructQueryContext constructQuery() {
		ConstructQueryContext _localctx = new ConstructQueryContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constructQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(60);
			State = 179; constructTemplate();
			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 180; datasetClause();
				}
				}
				State = 185;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 186; whereClause();
			State = 187; solutionModifier();
				    
			 q.ResultSet.ResultType=ResultType.Construct;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeQueryContext : ParserRuleContext {
		public VarLiteralContext _varLiteral;
		public IRIrefContext _iRIref;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public IReadOnlyList<IRIrefContext> iRIref() {
			return GetRuleContexts<IRIrefContext>();
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public IReadOnlyList<VarLiteralContext> varLiteral() {
			return GetRuleContexts<VarLiteralContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public VarLiteralContext varLiteral(int i) {
			return GetRuleContext<VarLiteralContext>(i);
		}
		public IRIrefContext iRIref(int i) {
			return GetRuleContext<IRIrefContext>(i);
		}
		public DescribeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_describeQuery; }
	}

	[RuleVersion(0)]
	public DescribeQueryContext describeQuery() {
		DescribeQueryContext _localctx = new DescribeQueryContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_describeQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(67);
			State = 203;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
			case VAR1:
			case VAR2:
				{
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 197;
					switch (_input.La(1)) {
					case VAR1:
					case VAR2:
						{
						State = 191; _localctx._varLiteral = varLiteral();
						q.variables.Add((_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null));
						}
						break;
					case PREFIXED_NAME:
					case IRI_REF:
						{
						State = 194; _localctx._iRIref = iRIref();
						 q.constants.Add((_localctx._iRIref!=null?_input.GetText(_localctx._iRIref.start,_localctx._iRIref.stop):null)); 
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 199;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)))) != 0) );
				}
				break;
			case 6:
				{
				State = 201; Match(6);
				 q.all=true; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 205; datasetClause();
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 212;
			_la = _input.La(1);
			if (_la==5 || _la==49) {
				{
				State = 211; whereClause();
				}
			}

			State = 214; solutionModifier();
			 q.ResultSet.ResultType=ResultType.Describe; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskQueryContext : ParserRuleContext {
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public AskQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_askQuery; }
	}

	[RuleVersion(0)]
	public AskQueryContext askQuery() {
		AskQueryContext _localctx = new AskQueryContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_askQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(53);
			State = 221;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==32) {
				{
				{
				State = 218; datasetClause();
				}
				}
				State = 223;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 224; whereClause();
			q.ResultSet.ResultType=ResultType.Ask;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetClauseContext : ParserRuleContext {
		public NamedGraphClauseContext namedGraphClause() {
			return GetRuleContext<NamedGraphClauseContext>(0);
		}
		public DefaultGraphClauseContext defaultGraphClause() {
			return GetRuleContext<DefaultGraphClauseContext>(0);
		}
		public DatasetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_datasetClause; }
	}

	[RuleVersion(0)]
	public DatasetClauseContext datasetClause() {
		DatasetClauseContext _localctx = new DatasetClauseContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_datasetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(32);
			State = 230;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
				{
				State = 228; defaultGraphClause();
				}
				break;
			case 73:
				{
				State = 229; namedGraphClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public DefaultGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_defaultGraphClause; }
	}

	[RuleVersion(0)]
	public DefaultGraphClauseContext defaultGraphClause() {
		DefaultGraphClauseContext _localctx = new DefaultGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_defaultGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public NamedGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_namedGraphClause; }
	}

	[RuleVersion(0)]
	public NamedGraphClauseContext namedGraphClause() {
		NamedGraphClauseContext _localctx = new NamedGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namedGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(73);
			State = 235; sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceSelectorContext : ParserRuleContext {
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public SourceSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sourceSelector; }
	}

	[RuleVersion(0)]
	public SourceSelectorContext sourceSelector() {
		SourceSelectorContext _localctx = new SourceSelectorContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_sourceSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; iRIref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public GroupGraphPatternContext _groupGraphPattern;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whereClause; }
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = _input.La(1);
			if (_la==5) {
				{
				State = 239; Match(5);
				}
			}

			State = 242; _localctx._groupGraphPattern = groupGraphPattern();
			q.SparqlWhere.Triples.AddRange(_localctx._groupGraphPattern.value.Triples);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SolutionModifierContext : ParserRuleContext {
		public LimitOffsetClausesContext limitOffsetClauses() {
			return GetRuleContext<LimitOffsetClausesContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public SolutionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_solutionModifier; }
	}

	[RuleVersion(0)]
	public SolutionModifierContext solutionModifier() {
		SolutionModifierContext _localctx = new SolutionModifierContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_solutionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = _input.La(1);
			if (_la==15) {
				{
				State = 245; orderClause();
				}
			}

			State = 249;
			_la = _input.La(1);
			if (_la==41 || _la==68) {
				{
				State = 248; limitOffsetClauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOffsetClausesContext : ParserRuleContext {
		public LimitClauseContext _limitClause;
		public OffsetClauseContext _offsetClause;
		public OffsetClauseContext offsetClause() {
			return GetRuleContext<OffsetClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public LimitOffsetClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_limitOffsetClauses; }
	}

	[RuleVersion(0)]
	public LimitOffsetClausesContext limitOffsetClauses() {
		LimitOffsetClausesContext _localctx = new LimitOffsetClausesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_limitOffsetClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			switch (_input.La(1)) {
			case 68:
				{
				State = 251; _localctx._limitClause = limitClause();
				 q.ListSolutionModifiersCount.Add(_localctx._limitClause.value); 
				State = 256;
				_la = _input.La(1);
				if (_la==41) {
					{
					State = 253; _localctx._offsetClause = offsetClause();
					 q.ListSolutionModifiersCount.Add(_localctx._offsetClause.value); 
					}
				}

				}
				break;
			case 41:
				{
				State = 258; _localctx._offsetClause = offsetClause();
				 q.ListSolutionModifiersCount.Add(_localctx._offsetClause.value); 
				State = 263;
				_la = _input.La(1);
				if (_la==68) {
					{
					State = 260; _localctx._limitClause = limitClause();
					 q.ListSolutionModifiersCount.Add(_localctx._limitClause.value); 
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		public OrderConditionContext main;
		public OrderConditionContext others;
		public OrderConditionContext orderCondition(int i) {
			return GetRuleContext<OrderConditionContext>(i);
		}
		public IReadOnlyList<OrderConditionContext> orderCondition() {
			return GetRuleContexts<OrderConditionContext>();
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_orderClause; }
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_orderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(15);
			State = 268; Match(39);
			State = 269; _localctx.main = orderCondition();
			q.ListSolutionModifiersOrder.Add(_localctx.main.value); 
			State = 276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 3) | (1L << 9) | (1L << 12) | (1L << 17) | (1L << 18) | (1L << 20) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 25) | (1L << 27) | (1L << 28) | (1L << 29) | (1L << 31) | (1L << 33) | (1L << 34) | (1L << 42) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 48) | (1L << 50) | (1L << 51) | (1L << 52) | (1L << 61) | (1L << 62))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (66 - 66)) | (1L << (71 - 66)) | (1L << (PREFIXED_NAME - 66)) | (1L << (IRI_REF - 66)) | (1L << (VAR1 - 66)) | (1L << (VAR2 - 66)))) != 0)) {
				{
				{
				State = 271; _localctx.others = orderCondition();
				 q.ListSolutionModifiersOrder.Add(_localctx.others.value); 
				}
				}
				State = 278;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderConditionContext : ParserRuleContext {
		public Func<IEnumerable<SparqlResult>, IEnumerable<SparqlResult>> value;
		public bool isDescending;
		public BrackettedExpressionContext _brackettedExpression;
		public ConstraintContext _constraint;
		public VarContext _var;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OrderConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_orderCondition; }
	}

	[RuleVersion(0)]
	public OrderConditionContext orderCondition() {
		OrderConditionContext _localctx = new OrderConditionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_orderCondition);
		try {
			State = 295;
			switch (_input.La(1)) {
			case 25:
			case 42:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 282;
				switch (_input.La(1)) {
				case 42:
					{
					State = 279; Match(42);
					}
					break;
				case 25:
					{
					State = 280; Match(25);
					 _localctx.isDescending = true;  
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284; _localctx._brackettedExpression = brackettedExpression();
				 
				 var orderExpr = _localctx._brackettedExpression.value;
				 
				 	Func<SparqlResult, dynamic> orderFunc =  pac =>
										{ var o = orderExpr(pac);
				                            if(o is VariableNode )
											return pac[((VariableNode)o).index];
				                            //if(o is IUriNode)
										    return o;
				                            //if(o is ILiteralNode)                            
				                            {
				                                var l = (ILiteralNode)o;
				                                //if (l.Value is double)
				                                //    return double.Parse(l.Value);
				                                //if (l.Value is long)
				                                //    return long.Parse(l.Value);
				                                return l;
				                            }
											throw new NotImplementedException();						     
										};
				 if(_localctx.isDescending)_localctx.value =  pacs => pacs.OrderByDescending(orderFunc);
				 else  _localctx.value =  pacs => pacs.OrderBy(orderFunc);
				  	 
				}
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
			case PREFIXED_NAME:
			case IRI_REF:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				switch (_input.La(1)) {
				case 2:
				case 3:
				case 9:
				case 12:
				case 17:
				case 18:
				case 20:
				case 22:
				case 23:
				case 24:
				case 27:
				case 28:
				case 29:
				case 31:
				case 33:
				case 34:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 50:
				case 51:
				case 52:
				case 61:
				case 62:
				case 66:
				case 71:
				case PREFIXED_NAME:
				case IRI_REF:
					{
					State = 287; _localctx._constraint = constraint();

					  var orderExpr = _localctx._constraint.value;
							Func<SparqlResult, dynamic> orderFunc = pac=>
											{
											    var o = orderExpr(pac);
					                            if(o is VariableNode )
																			return pac[((VariableNode)o).index];
					                            if(o is IUriNode)
											    return o;                            
					                            if(o is ILiteralNode)                            
					                            {
					                                var l = (ILiteralNode)o;
					                                //if (l.Value is double)
					                                //    return double.Parse(l.Value);
					                                //if (l.Value is long)
					                                //    return long.Parse(l.Value);
					                                return l;
					                            }
												throw new NotImplementedException();
											};
											_localctx.value =  packs=>packs.OrderBy(orderFunc);

					 
					}
					break;
				case VAR1:
				case VAR2:
					{
					State = 290; _localctx._var = var();

					int i = (_localctx._var.p.index);
						Func<SparqlResult, dynamic> orderFunc = pac=> pac[i];
											
											_localctx.value =  pack => pack.OrderBy(orderFunc);
					 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public Func<IEnumerable<SparqlResult>, IEnumerable<SparqlResult>> value;
		public IToken _INTEGER;
		public ITerminalNode INTEGER() { return GetToken(sparql2PacNSParser.INTEGER, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_limitClause; }
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(68);
			State = 298; _localctx._INTEGER = Match(INTEGER);
			 _localctx.value = sequence=>sequence.Take(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetClauseContext : ParserRuleContext {
		public Func<IEnumerable<SparqlResult>, IEnumerable<SparqlResult>> value;
		public IToken _INTEGER;
		public ITerminalNode INTEGER() { return GetToken(sparql2PacNSParser.INTEGER, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_offsetClause; }
	}

	[RuleVersion(0)]
	public OffsetClauseContext offsetClause() {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_offsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(41);
			State = 302; _localctx._INTEGER = Match(INTEGER);
			 _localctx.value = sequence=>sequence.Skip(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupGraphPatternContext : ParserRuleContext {
		public SparqlWhere value=new SparqlWhere();
		public TriplesBlockContext _triplesBlock;
		public GraphPatternNotTriplesContext _graphPatternNotTriples;
		public FilterContext _filter;
		public IReadOnlyList<FilterContext> filter() {
			return GetRuleContexts<FilterContext>();
		}
		public IReadOnlyList<GraphPatternNotTriplesContext> graphPatternNotTriples() {
			return GetRuleContexts<GraphPatternNotTriplesContext>();
		}
		public GraphPatternNotTriplesContext graphPatternNotTriples(int i) {
			return GetRuleContext<GraphPatternNotTriplesContext>(i);
		}
		public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public TriplesBlockContext triplesBlock(int i) {
			return GetRuleContext<TriplesBlockContext>(i);
		}
		public IReadOnlyList<TriplesBlockContext> triplesBlock() {
			return GetRuleContexts<TriplesBlockContext>();
		}
		public GroupGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_groupGraphPattern; }
	}

	[RuleVersion(0)]
	public GroupGraphPatternContext groupGraphPattern() {
		GroupGraphPatternContext _localctx = new GroupGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_groupGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(49);
			State = 309;
			_la = _input.La(1);
			if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
				{
				State = 306; _localctx._triplesBlock = triplesBlock();
				_localctx.value.Triples.AddRange(_localctx._triplesBlock.value.Triples);
				}
			}

			State = 329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << 38) | (1L << 49) | (1L << 54))) != 0)) {
				{
				{
				State = 317;
				switch (_input.La(1)) {
				case 38:
				case 49:
				case 54:
					{
					State = 311; _localctx._graphPatternNotTriples = graphPatternNotTriples();
					 _localctx.value.Triples.Add(_localctx._graphPatternNotTriples.value);  
					}
					break;
				case 7:
					{
					State = 314; _localctx._filter = filter();
					 _localctx.value.Triples.Add(_localctx._filter.value);  
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 320;
				_la = _input.La(1);
				if (_la==56) {
					{
					State = 319; Match(56);
					}
				}

				State = 325;
				_la = _input.La(1);
				if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
					{
					State = 322; _localctx._triplesBlock = triplesBlock();
					_localctx.value.Triples.AddRange(_localctx._triplesBlock.value.Triples);
					}
				}

				}
				}
				State = 331;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 332; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesBlockContext : ParserRuleContext {
		public SparqlWhere value=new SparqlWhere();
		public TriplesSameSubjectContext _triplesSameSubject;
		public TriplesBlockContext next;
		public TriplesBlockContext triplesBlock() {
			return GetRuleContext<TriplesBlockContext>(0);
		}
		public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		public TriplesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesBlock; }
	}

	[RuleVersion(0)]
	public TriplesBlockContext triplesBlock() {
		TriplesBlockContext _localctx = new TriplesBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_triplesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; _localctx._triplesSameSubject = triplesSameSubject();
			_localctx.value.Triples.AddRange(_localctx._triplesSameSubject.value.Triples);
			State = 342;
			_la = _input.La(1);
			if (_la==56) {
				{
				State = 336; Match(56);
				State = 340;
				_la = _input.La(1);
				if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
					{
					State = 337; _localctx.next = triplesBlock();
					_localctx.value.Triples.AddRange(_localctx.next.value.Triples); 
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphPatternNotTriplesContext : ParserRuleContext {
		public ISparqlWhereItem value;
		public OptionalGraphPatternContext _optionalGraphPattern;
		public GroupOrUnionGraphPatternContext _groupOrUnionGraphPattern;
		public GraphGraphPatternContext _graphGraphPattern;
		public GraphGraphPatternContext graphGraphPattern() {
			return GetRuleContext<GraphGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext optionalGraphPattern() {
			return GetRuleContext<OptionalGraphPatternContext>(0);
		}
		public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
			return GetRuleContext<GroupOrUnionGraphPatternContext>(0);
		}
		public GraphPatternNotTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphPatternNotTriples; }
	}

	[RuleVersion(0)]
	public GraphPatternNotTriplesContext graphPatternNotTriples() {
		GraphPatternNotTriplesContext _localctx = new GraphPatternNotTriplesContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_graphPatternNotTriples);
		try {
			State = 353;
			switch (_input.La(1)) {
			case 38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; _localctx._optionalGraphPattern = optionalGraphPattern();
				_localctx.value = _localctx._optionalGraphPattern.value;
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; _localctx._groupOrUnionGraphPattern = groupOrUnionGraphPattern();
				_localctx.value = _localctx._groupOrUnionGraphPattern.value;
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; _localctx._graphGraphPattern = graphGraphPattern();
				_localctx.value = _localctx._graphGraphPattern.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalGraphPatternContext : ParserRuleContext {
		public OptionalWhere value;
		public GroupGraphPatternContext _groupGraphPattern;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_optionalGraphPattern; }
	}

	[RuleVersion(0)]
	public OptionalGraphPatternContext optionalGraphPattern() {
		OptionalGraphPatternContext _localctx = new OptionalGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_optionalGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(38);
			int parametersStartIndex = q.ResultSet.Variables.Count; 
			State = 357; _localctx._groupGraphPattern = groupGraphPattern();

				_localctx.value = new OptionalWhere(q.ResultSet);
				_localctx.value.Triples= _localctx._groupGraphPattern.value.Triples;
				_localctx.value.StartIndex=parametersStartIndex;;
				_localctx.value.EndIndex = q.ResultSet.Variables.Count;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphGraphPatternContext : ParserRuleContext {
		public ISparqlWhereItem value;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public VarOrIRIrefContext varOrIRIref() {
			return GetRuleContext<VarOrIRIrefContext>(0);
		}
		public GraphGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphGraphPattern; }
	}

	[RuleVersion(0)]
	public GraphGraphPatternContext graphGraphPattern() {
		GraphGraphPatternContext _localctx = new GraphGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_graphGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(54);
			State = 361; varOrIRIref();
			State = 362; groupGraphPattern();
						throw new NotImplementedException();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupOrUnionGraphPatternContext : ParserRuleContext {
		public UnionWhere value;
		public GroupGraphPatternContext first;
		public GroupGraphPatternContext second;
		public IReadOnlyList<GroupGraphPatternContext> groupGraphPattern() {
			return GetRuleContexts<GroupGraphPatternContext>();
		}
		public GroupGraphPatternContext groupGraphPattern(int i) {
			return GetRuleContext<GroupGraphPatternContext>(i);
		}
		public GroupOrUnionGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_groupOrUnionGraphPattern; }
	}

	[RuleVersion(0)]
	public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
		GroupOrUnionGraphPatternContext _localctx = new GroupOrUnionGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_groupOrUnionGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{

			 _localctx.value = new UnionWhere(q.ResultSet);  

			State = 366; _localctx.first = groupGraphPattern();
			 _localctx.value.Add(_localctx.first.value, q.ResultSet.Variables.Count);
			State = 374;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==72) {
				{
				{
				State = 368; Match(72);
				State = 369; _localctx.second = groupGraphPattern();
				 _localctx.value.Add(_localctx.second.value, q.ResultSet.Variables.Count);
				}
				}
				State = 376;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public SparqlFilter value;
		public ConstraintContext _constraint;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_filter; }
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(7);
			State = 378; _localctx._constraint = constraint();

			var f=_localctx._constraint.value;
			     _localctx.value =  new SparqlFilter(q.ResultSet){ Filter  = f };

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public FunctionCallContext _functionCall;
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constraint; }
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_constraint);
		try {
			State = 390;
			switch (_input.La(1)) {
			case 44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381; _localctx._brackettedExpression = brackettedExpression();
				_localctx.value = _localctx._brackettedExpression.value;
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384; _localctx._builtInCall = builtInCall();
				_localctx.value = _localctx._builtInCall.value;
				}
				break;
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 387; _localctx._functionCall = functionCall();
				_localctx.value = _localctx._functionCall.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public IRIrefContext _iRIref;
		public ArgListContext _argList;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCall; }
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; _localctx._iRIref = iRIref();
			State = 393; _localctx._argList = argList();
			_localctx.value = q.Call(_localctx._iRIref.value, _localctx._argList.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public List<Func<SparqlResult, dynamic>> value;
		public ExpressionContext main;
		public ExpressionContext second;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NIL() { return GetToken(sparql2PacNSParser.NIL, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argList; }
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			switch (_input.La(1)) {
			case NIL:
				{
				State = 396; Match(NIL);

				}
				break;
			case 44:
				{
				State = 398; Match(44);
				State = 399; _localctx.main = expression();
				 _localctx.value = new List<Func<SparqlResult, dynamic>>(){ _localctx.main.value }; 
				State = 407;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==40) {
					{
					{
					State = 401; Match(40);
					State = 402; _localctx.second = expression();
					 _localctx.value.Add(_localctx.second.value); 
					}
					}
					State = 409;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 410; Match(19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTemplateContext : ParserRuleContext {
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public ConstructTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructTemplate; }
	}

	[RuleVersion(0)]
	public ConstructTemplateContext constructTemplate() {
		ConstructTemplateContext _localctx = new ConstructTemplateContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_constructTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(49);
			State = 416;
			_la = _input.La(1);
			if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
				{
				State = 415; constructTriples();
				}
			}

			State = 418; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTriplesContext : ParserRuleContext {
		public TriplesSameSubjectContext _triplesSameSubject;
		public ConstructTriplesContext next;
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		public ConstructTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructTriples; }
	}

	[RuleVersion(0)]
	public ConstructTriplesContext constructTriples() {
		ConstructTriplesContext _localctx = new ConstructTriplesContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_constructTriples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; _localctx._triplesSameSubject = triplesSameSubject();
			 q.Construct.Triples.AddRange(_localctx._triplesSameSubject.value.Triples);
			State = 426;
			_la = _input.La(1);
			if (_la==56) {
				{
				State = 422; Match(56);
				State = 424;
				_la = _input.La(1);
				if (_la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0)) {
					{
					State = 423; _localctx.next = constructTriples();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectContext : ParserRuleContext {
		public SparqlWhere value;
		public SparqlNode subj;
		public PropertyListNotEmptyContext _propertyListNotEmpty;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public PropertyListContext propertyList() {
			return GetRuleContext<PropertyListContext>(0);
		}
		public VarOrTermSubContext varOrTermSub() {
			return GetRuleContext<VarOrTermSubContext>(0);
		}
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public TriplesSameSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesSameSubject; }
	}

	[RuleVersion(0)]
	public TriplesSameSubjectContext triplesSameSubject() {
		TriplesSameSubjectContext _localctx = new TriplesSameSubjectContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_triplesSameSubject);
		try {
			State = 436;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428; varOrTermSub();
				State = 429; _localctx._propertyListNotEmpty = propertyListNotEmpty();
				  _localctx.value = _localctx._propertyListNotEmpty.value; 
				}
				break;
			case 4:
			case 44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; triplesNode();
				State = 433; propertyList();

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListNotEmptyContext : ParserRuleContext {
		public SparqlWhere value;
		public VerbObjectListContext main;
		public VerbObjectListContext seconds;
		public IReadOnlyList<VerbObjectListContext> verbObjectList() {
			return GetRuleContexts<VerbObjectListContext>();
		}
		public VerbObjectListContext verbObjectList(int i) {
			return GetRuleContext<VerbObjectListContext>(i);
		}
		public PropertyListNotEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_propertyListNotEmpty; }
	}

	[RuleVersion(0)]
	public PropertyListNotEmptyContext propertyListNotEmpty() {
		PropertyListNotEmptyContext _localctx = new PropertyListNotEmptyContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_propertyListNotEmpty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; _localctx.main = verbObjectList();
			 _localctx.value = _localctx.main.value; 
			State = 448;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==59) {
				{
				{
				State = 440; Match(59);
				State = 444;
				_la = _input.La(1);
				if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (55 - 55)) | (1L << (PREFIXED_NAME - 55)) | (1L << (IRI_REF - 55)) | (1L << (VAR1 - 55)) | (1L << (VAR2 - 55)))) != 0)) {
					{
					State = 441; _localctx.seconds = verbObjectList();
					 _localctx.value.Triples.AddRange(_localctx.seconds.value.Triples); 
					}
				}

				}
				}
				State = 450;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListContext : ParserRuleContext {
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_propertyList; }
	}

	[RuleVersion(0)]
	public PropertyListContext propertyList() {
		PropertyListContext _localctx = new PropertyListContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_propertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (55 - 55)) | (1L << (PREFIXED_NAME - 55)) | (1L << (IRI_REF - 55)) | (1L << (VAR1 - 55)) | (1L << (VAR2 - 55)))) != 0)) {
				{
				State = 451; propertyListNotEmpty();
				  
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbObjectListContext : ParserRuleContext {
		public SparqlWhere value;
		public SparqlNode Predicate;
		public ObjectListContext _objectList;
		public VerbContext verb() {
			return GetRuleContext<VerbContext>(0);
		}
		public ObjectListContext objectList() {
			return GetRuleContext<ObjectListContext>(0);
		}
		public VerbObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_verbObjectList; }
	}

	[RuleVersion(0)]
	public VerbObjectListContext verbObjectList() {
		VerbObjectListContext _localctx = new VerbObjectListContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_verbObjectList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; verb();
			State = 457; _localctx._objectList = objectList();
			 _localctx.value = _localctx._objectList.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListContext : ParserRuleContext {
		public SparqlWhere value;
		public GraphNodeContext o0;
		public GraphNodeContext o1;
		public IReadOnlyList<GraphNodeContext> graphNode() {
			return GetRuleContexts<GraphNodeContext>();
		}
		public GraphNodeContext graphNode(int i) {
			return GetRuleContext<GraphNodeContext>(i);
		}
		public ObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectList; }
	}

	[RuleVersion(0)]
	public ObjectListContext objectList() {
		ObjectListContext _localctx = new ObjectListContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_objectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; _localctx.o0 = graphNode();
			 _localctx.value = _localctx.o0.value;	 
			State = 468;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==40) {
				{
				{
				State = 462; Match(40);
				State = 463; _localctx.o1 = graphNode();
				 _localctx.value.Triples.AddRange(_localctx.o1.value.Triples); 
				}
				}
				State = 470;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbContext : ParserRuleContext {
		public VarOrIRIrefContext _varOrIRIref;
		public VarOrIRIrefContext varOrIRIref() {
			return GetRuleContext<VarOrIRIrefContext>(0);
		}
		public VerbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_verb; }
	}

	[RuleVersion(0)]
	public VerbContext verb() {
		VerbContext _localctx = new VerbContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_verb);
		try {
			State = 476;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471; _localctx._varOrIRIref = varOrIRIref();
				 ((VerbObjectListContext)GetInvokingContext(34)).Predicate = _localctx._varOrIRIref.p; 
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474; Match(55);
					((VerbObjectListContext)GetInvokingContext(34)).Predicate = new SparqlUriNode{ Uri=new Uri("http://www.w3.org/1999/02/22-rdf-syntax-ns#type")}; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesNodeContext : ParserRuleContext {
		public SparqlWhere value;
		public CollectionContext _collection;
		public BlankNodePropertyListContext blankNodePropertyList() {
			return GetRuleContext<BlankNodePropertyListContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TriplesNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesNode; }
	}

	[RuleVersion(0)]
	public TriplesNodeContext triplesNode() {
		TriplesNodeContext _localctx = new TriplesNodeContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_triplesNode);
		try {
			State = 484;
			switch (_input.La(1)) {
			case 44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478; _localctx._collection = collection();
				 _localctx.value = _localctx._collection.value; 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; blankNodePropertyList();

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListContext : ParserRuleContext {
		public SparqlWhere f;
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public BlankNodePropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blankNodePropertyList; }
	}

	[RuleVersion(0)]
	public BlankNodePropertyListContext blankNodePropertyList() {
		BlankNodePropertyListContext _localctx = new BlankNodePropertyListContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_blankNodePropertyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(4);
			State = 487; propertyListNotEmpty();
			State = 488; Match(37);
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public SparqlWhere value=new SparqlWhere();
		public GraphNodeContext _graphNode;
		public IReadOnlyList<GraphNodeContext> graphNode() {
			return GetRuleContexts<GraphNodeContext>();
		}
		public GraphNodeContext graphNode(int i) {
			return GetRuleContext<GraphNodeContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_collection; }
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(44);
			State = 495;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 492; _localctx._graphNode = graphNode();
				 _localctx.value.Triples.AddRange(_localctx._graphNode.value.Triples); 
				}
				}
				State = 497;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==4 || _la==44 || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PREFIXED_NAME - 75)) | (1L << (NumericLiteralPositive - 75)) | (1L << (NumericLiteralNegative - 75)) | (1L << (BooleanLiteral - 75)) | (1L << (String - 75)) | (1L << (BlankNode - 75)) | (1L << (IRI_REF - 75)) | (1L << (VAR1 - 75)) | (1L << (VAR2 - 75)) | (1L << (INTEGER - 75)) | (1L << (DECIMAL - 75)) | (1L << (DOUBLE - 75)) | (1L << (NIL - 75)))) != 0) );
			State = 499; Match(19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodeContext : ParserRuleContext {
		public SparqlWhere value =new SparqlWhere();
		public VarOrTermContext _varOrTerm;
		public TriplesNodeContext _triplesNode;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		public GraphNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphNode; }
	}

	[RuleVersion(0)]
	public GraphNodeContext graphNode() {
		GraphNodeContext _localctx = new GraphNodeContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_graphNode);
		try {
			State = 507;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501; _localctx._varOrTerm = varOrTerm();
				 _localctx.value.Triples.Add(_localctx._varOrTerm.value); 
				}
				break;
			case 4:
			case 44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504; _localctx._triplesNode = triplesNode();
				_localctx.value = _localctx._triplesNode.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermSubContext : ParserRuleContext {
		public VarContext _var;
		public GraphTermContext _graphTerm;
		public GraphTermContext graphTerm() {
			return GetRuleContext<GraphTermContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrTermSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrTermSub; }
	}

	[RuleVersion(0)]
	public VarOrTermSubContext varOrTermSub() {
		VarOrTermSubContext _localctx = new VarOrTermSubContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_varOrTermSub);
		try {
			State = 515;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509; _localctx._var = var();
				 ((TriplesSameSubjectContext)GetInvokingContext(31)).subj = _localctx._var.p; 
				}
				break;
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512; _localctx._graphTerm = graphTerm();
					((TriplesSameSubjectContext)GetInvokingContext(31)).subj =  _localctx._graphTerm.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermContext : ParserRuleContext {
		public SparqlTriplet value;
		public VarContext _var;
		public GraphTermContext _graphTerm;
		public GraphTermContext graphTerm() {
			return GetRuleContext<GraphTermContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrTerm; }
	}

	[RuleVersion(0)]
	public VarOrTermContext varOrTerm() {
		VarOrTermContext _localctx = new VarOrTermContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_varOrTerm);
		try {
			State = 523;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517; _localctx._var = var();
					   
					var p = ((VerbObjectListContext)GetInvokingContext(34)).Predicate;
					var sVar = ((TriplesSameSubjectContext)GetInvokingContext(31)).subj;		  	
						_localctx.value =  new SparqlTriplet(sVar, p, _localctx._var.p);	 		
				  
				}
				break;
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520; _localctx._graphTerm = graphTerm();

					var p = ((VerbObjectListContext)GetInvokingContext(34)).Predicate;
					var sVar = ((TriplesSameSubjectContext)GetInvokingContext(31)).subj;
					_localctx.value =  new SparqlTriplet(sVar, p, _localctx._graphTerm.value);	

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrIRIrefContext : ParserRuleContext {
		public SparqlNode p;
		public VarContext _var;
		public IRIrefContext _iRIref;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrIRIrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrIRIref; }
	}

	[RuleVersion(0)]
	public VarOrIRIrefContext varOrIRIref() {
		VarOrIRIrefContext _localctx = new VarOrIRIrefContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_varOrIRIref);
		try {
			State = 531;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525; _localctx._var = var();
				  _localctx.p =  _localctx._var.p;  
				}
				break;
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528; _localctx._iRIref = iRIref();
					
				_localctx.p =  _localctx._iRIref.value;    

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public VariableNode p;
		public VarLiteralContext _varLiteral;
		public VarLiteralContext varLiteral() {
			return GetRuleContext<VarLiteralContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_var; }
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; _localctx._varLiteral = varLiteral();

			_localctx.p =  q.GetVariable((_localctx._varLiteral!=null?_input.GetText(_localctx._varLiteral.start,_localctx._varLiteral.stop):null));

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarLiteralContext : ParserRuleContext {
		public ITerminalNode VAR2() { return GetToken(sparql2PacNSParser.VAR2, 0); }
		public ITerminalNode VAR1() { return GetToken(sparql2PacNSParser.VAR1, 0); }
		public VarLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varLiteral; }
	}

	[RuleVersion(0)]
	public VarLiteralContext varLiteral() {
		VarLiteralContext _localctx = new VarLiteralContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_varLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			_la = _input.La(1);
			if ( !(_la==VAR1 || _la==VAR2) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphTermContext : ParserRuleContext {
		public SparqlNode value;
		public IRIrefContext _iRIref;
		public RDFLiteralContext _rDFLiteral;
		public NumericContext _numeric;
		public IToken _BooleanLiteral;
		public IToken _BlankNode;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public ITerminalNode BlankNode() { return GetToken(sparql2PacNSParser.BlankNode, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ITerminalNode NIL() { return GetToken(sparql2PacNSParser.NIL, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(sparql2PacNSParser.BooleanLiteral, 0); }
		public GraphTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphTerm; }
	}

	[RuleVersion(0)]
	public GraphTermContext graphTerm() {
		GraphTermContext _localctx = new GraphTermContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_graphTerm);
		try {
			State = 553;
			switch (_input.La(1)) {
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538; _localctx._iRIref = iRIref();
				   _localctx.value = _localctx._iRIref.value; 
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541; _localctx._rDFLiteral = rDFLiteral();
				_localctx.value = _localctx._rDFLiteral.value;
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 544; _localctx._numeric = numeric();
				  _localctx.value = new SparqlLiteralNode{Content=_localctx._numeric.num}; 
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 547; _localctx._BooleanLiteral = Match(BooleanLiteral);
					 _localctx.value = new SparqlLiteralNode{ Content=bool.Parse((_localctx._BooleanLiteral!=null?_localctx._BooleanLiteral.Text:null))}; 
				}
				break;
			case BlankNode:
				EnterOuterAlt(_localctx, 5);
				{
				State = 549; _localctx._BlankNode = Match(BlankNode);
				 _localctx.value =  new SparqlBlankNode((_localctx._BlankNode!=null?_localctx._BlankNode.Text:null)); 
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 551; Match(NIL);
					_localctx.value =  null;  
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public ConditionalAndExpressionContext main;
		public ConditionalAndExpressionContext alt;
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public IReadOnlyList<ConditionalAndExpressionContext> conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; _localctx.main = conditionalAndExpression();
			 _localctx.value = _localctx.main.value;  
			State = 563;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==64) {
				{
				{
				State = 557; Match(64);
				State = 558; _localctx.alt = conditionalAndExpression();
				 Func<SparqlResult, dynamic> cloneValue=_localctx.value; 
				Func<SparqlResult, dynamic> cloneAlt=_localctx.alt.value;
					_localctx.value =  x=> cloneValue(x) || cloneAlt(x); 
					
				}
				}
				State = 565;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public ValueLogicalContext main;
		public ValueLogicalContext alt;
		public IReadOnlyList<ValueLogicalContext> valueLogical() {
			return GetRuleContexts<ValueLogicalContext>();
		}
		public ValueLogicalContext valueLogical(int i) {
			return GetRuleContext<ValueLogicalContext>(i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_conditionalAndExpression; }
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; _localctx.main = valueLogical();
			_localctx.value = _localctx.main.value; 
			State = 574;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==63) {
				{
				{
				State = 568; Match(63);
				State = 569; _localctx.alt = valueLogical();

				var cloneValue=_localctx.value;
				var cloneAlt=_localctx.alt.value;
				_localctx.value =  x=>cloneValue(x) && cloneAlt(x); 
				}
				}
				State = 576;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueLogicalContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public AdditiveExpressionContext main;
		public AdditiveExpressionContext second;
		public IReadOnlyList<AdditiveExpressionContext> additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ValueLogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_valueLogical; }
	}

	[RuleVersion(0)]
	public ValueLogicalContext valueLogical() {
		ValueLogicalContext _localctx = new ValueLogicalContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_valueLogical);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; _localctx.main = additiveExpression();
			 _localctx.value = _localctx.main.value; 
			State = 603;
			switch (_input.La(1)) {
			case 26:
				{
				State = 579; Match(26);
				State = 580; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)==f1(x);  
				}
				break;
			case 10:
				{
				State = 583; Match(10);
				State = 584; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)!=f1(x); 
				}
				break;
			case 8:
				{
				State = 587; Match(8);
				State = 588; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)<f1(x);  
				}
				break;
			case 65:
				{
				State = 591; Match(65);
				State = 592; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)>f1(x);  
				}
				break;
			case 11:
				{
				State = 595; Match(11);
				State = 596; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)<=f1(x);  
				}
				break;
			case 70:
				{
				State = 599; Match(70);
				State = 600; _localctx.second = additiveExpression();
				 var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)>=f1(x);  
				}
				break;
			case 19:
			case 40:
			case 63:
			case 64:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public MultiplicativeExpressionContext main;
		public MultiplicativeExpressionContext second;
		public IToken _NumericLiteralPositive;
		public IToken _NumericLiteralNegative;
		public ITerminalNode NumericLiteralNegative(int i) {
			return GetToken(sparql2PacNSParser.NumericLiteralNegative, i);
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public ITerminalNode NumericLiteralPositive(int i) {
			return GetToken(sparql2PacNSParser.NumericLiteralPositive, i);
		}
		public IReadOnlyList<MultiplicativeExpressionContext> multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public IReadOnlyList<ITerminalNode> NumericLiteralPositive() { return GetTokens(sparql2PacNSParser.NumericLiteralPositive); }
		public IReadOnlyList<ITerminalNode> NumericLiteralNegative() { return GetTokens(sparql2PacNSParser.NumericLiteralNegative); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_additiveExpression; }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; _localctx.main = multiplicativeExpression();
			 _localctx.value = _localctx.main.value;  
			State = 621;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (43 - 43)) | (1L << (58 - 43)) | (1L << (NumericLiteralPositive - 43)) | (1L << (NumericLiteralNegative - 43)))) != 0)) {
				{
				State = 619;
				switch (_input.La(1)) {
				case 58:
					{
					State = 607; Match(58);
					State = 608; _localctx.second = multiplicativeExpression();
					   var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)+f1(x);  
					}
					break;
				case 43:
					{
					State = 611; Match(43);
					State = 612; _localctx.second = multiplicativeExpression();
					   var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)-f1(x);  
					}
					break;
				case NumericLiteralPositive:
					{
					State = 615; _localctx._NumericLiteralPositive = Match(NumericLiteralPositive);
					 var f= _localctx.value; _localctx.value = x => f(x)+double.Parse((_localctx._NumericLiteralPositive!=null?_localctx._NumericLiteralPositive.Text:null));  
					}
					break;
				case NumericLiteralNegative:
					{
					State = 617; _localctx._NumericLiteralNegative = Match(NumericLiteralNegative);
					 var f= _localctx.value; _localctx.value = x => f(x)+double.Parse((_localctx._NumericLiteralNegative!=null?_localctx._NumericLiteralNegative.Text:null));   
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 623;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public UnaryExpressionContext main;
		public UnaryExpressionContext second;
		public IReadOnlyList<UnaryExpressionContext> unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_multiplicativeExpression; }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; _localctx.main = unaryExpression();
			 _localctx.value = _localctx.main.value;  
			State = 636;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==6 || _la==69) {
				{
				State = 634;
				switch (_input.La(1)) {
				case 6:
					{
					State = 626; Match(6);
					State = 627; _localctx.second = unaryExpression();
					  var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)*f1(x);  
					}
					break;
				case 69:
					{
					State = 630; Match(69);
					State = 631; _localctx.second = unaryExpression();
					  var f= _localctx.value; var f1=_localctx.second.value; _localctx.value = x => f(x)/f1(x); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 638;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public PrimaryExpressionContext _primaryExpression;
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unaryExpression; }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_unaryExpression);
		try {
			State = 654;
			switch (_input.La(1)) {
			case 35:
				EnterOuterAlt(_localctx, 1);
				{
				State = 639; Match(35);
				State = 640; _localctx._primaryExpression = primaryExpression();
				 var f=_localctx._primaryExpression.value; _localctx.value = store=>! f(store); 
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643; Match(58);
				State = 644; _localctx._primaryExpression = primaryExpression();
				 _localctx.value =  _localctx._primaryExpression.value; 
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 3);
				{
				State = 647; Match(43);
				State = 648; _localctx._primaryExpression = primaryExpression();
				 var f=_localctx._primaryExpression.value; _localctx.value = store=> - f(store);  
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
			case PREFIXED_NAME:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case IRI_REF:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 651; _localctx._primaryExpression = primaryExpression();
				 _localctx.value = _localctx._primaryExpression.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public IRIrefOrFunctionContext _iRIrefOrFunction;
		public RDFLiteralContext _rDFLiteral;
		public NumericContext _numeric;
		public IToken _BooleanLiteral;
		public VarContext _var;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public IRIrefOrFunctionContext iRIrefOrFunction() {
			return GetRuleContext<IRIrefOrFunctionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode BooleanLiteral() { return GetToken(sparql2PacNSParser.BooleanLiteral, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_primaryExpression);
		try {
			State = 676;
			switch (_input.La(1)) {
			case 44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656; _localctx._brackettedExpression = brackettedExpression();
				 _localctx.value = _localctx._brackettedExpression.value; 
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 22:
			case 23:
			case 24:
			case 27:
			case 28:
			case 29:
			case 31:
			case 33:
			case 34:
			case 45:
			case 46:
			case 47:
			case 48:
			case 50:
			case 51:
			case 52:
			case 61:
			case 62:
			case 66:
			case 71:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659; _localctx._builtInCall = builtInCall();
				 _localctx.value = _localctx._builtInCall.value;  
				}
				break;
			case PREFIXED_NAME:
			case IRI_REF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 662; _localctx._iRIrefOrFunction = iRIrefOrFunction();
				 _localctx.value =  _localctx._iRIrefOrFunction.value;
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 4);
				{
				State = 665; _localctx._rDFLiteral = rDFLiteral();
				 int index=q.FilterConstants.Count;  q.FilterConstants.Add(_localctx._rDFLiteral.value);  _localctx.value =  result=> q.FilterConstants[index].Value;  
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 668; _localctx._numeric = numeric();
				 var rDFLiteral=new SparqlLiteralNode(_localctx._numeric.num);  _localctx.value =  store=>rDFLiteral.Value;  q.FilterConstants.Add(rDFLiteral); 
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 671; _localctx._BooleanLiteral = Match(BooleanLiteral);
				 var rDFLiteral=new SparqlLiteralNode(bool.Parse((_localctx._BooleanLiteral!=null?_localctx._BooleanLiteral.Text:null)));  _localctx.value =  store=>rDFLiteral.Value;  q.FilterConstants.Add(rDFLiteral); 
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 673; _localctx._var = var();
					 _localctx.value =  pac => pac[_localctx._var.p.index]; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrackettedExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BrackettedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_brackettedExpression; }
	}

	[RuleVersion(0)]
	public BrackettedExpressionContext brackettedExpression() {
		BrackettedExpressionContext _localctx = new BrackettedExpressionContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_brackettedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(44);
			State = 679; _localctx._expression = expression();
			State = 680; Match(19);
			 _localctx.value = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltInCallContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public ExpressionContext _expression;
		public RDFLiteralContext _rDFLiteral;
		public VarContext _var;
		public ExpressionContext l;
		public ExpressionContext r;
		public RegexExpressionContext _regexExpression;
		public RegexExpressionContext regexExpression() {
			return GetRuleContext<RegexExpressionContext>(0);
		}
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BuiltInCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_builtInCall; }
	}

	[RuleVersion(0)]
	public BuiltInCallContext builtInCall() {
		BuiltInCallContext _localctx = new BuiltInCallContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_builtInCall);
		int _la;
		try {
			State = 764;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683;
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (28 - 28)) | (1L << (34 - 28)) | (1L << (71 - 28)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 684; Match(44);
				State = 685; _localctx._expression = expression();
				State = 686; Match(19);
				 var f= _localctx._expression.value; _localctx.value = store => f(store).ToString();  
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 52) | (1L << 61) | (1L << 62))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 690; Match(44);
				State = 691; _localctx._rDFLiteral = rDFLiteral();
				State = 692; Match(19);
				 var f=_localctx._rDFLiteral.value; _localctx.value = q.Lang(_localctx._rDFLiteral.value);  
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 695;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 52) | (1L << 61) | (1L << 62))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 696; Match(44);
				State = 697; _localctx._var = var();
				State = 698; Match(19);
				 _localctx.value = q.Lang(_localctx._var.p);  
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 701;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 17) | (1L << 18) | (1L << 24) | (1L << 47))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 702; Match(44);
				State = 703; _localctx.l = expression();
				State = 704; Match(40);
				State = 705; Match(21);
				State = 706; Match(19);
				 _localctx.value =  q.Langmatch(_localctx.l.value);  
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 709;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 17) | (1L << 18) | (1L << 24) | (1L << 47))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 710; Match(44);
				State = 711; _localctx.l = expression();
				State = 712; Match(40);
				State = 713; _localctx.r = expression();
				State = 714; Match(19);
				 _localctx.value =  q.Langmatch(_localctx.l.value, _localctx.r.value);  
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 717;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 27) | (1L << 29) | (1L << 31) | (1L << 45) | (1L << 46))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 718; Match(44);
				State = 719; expression();
				State = 720; Match(19);
				  
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 723;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 22) | (1L << 23) | (1L << 50))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 724; Match(44);
				State = 725; _localctx._var = var();
				State = 726; Match(19);
				 _localctx.value =  q.Bound(_localctx._var.p);  
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 729; Match(33);
				State = 730; Match(44);
				State = 731; _localctx.l = expression();
				State = 732; Match(40);
				State = 733; _localctx.r = expression();
				State = 734; Match(19);
				 var lf=_localctx.l.value; var rf= _localctx.r.value; _localctx.value =  pac=> lf(pac) == rf(pac);  
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 737; Match(9);
				State = 738; Match(44);
				State = 739; expression();
				State = 740; Match(19);

				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 743; Match(48);
				State = 744; Match(44);
				State = 745; expression();
				State = 746; Match(19);
				 
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 749; Match(2);
				State = 750; Match(44);
				State = 751; expression();
				State = 752; Match(19);
				  
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 755; Match(51);
				State = 756; Match(44);
				State = 757; expression();
				State = 758; Match(19);
				 
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 761; _localctx._regexExpression = regexExpression();
				 _localctx.value = _localctx._regexExpression.value;  
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExpressionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public VarContext v;
		public IToken rex;
		public IToken extraParam;
		public IReadOnlyList<ITerminalNode> String() { return GetTokens(sparql2PacNSParser.String); }
		public ITerminalNode String(int i) {
			return GetToken(sparql2PacNSParser.String, i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public RegexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_regexExpression; }
	}

	[RuleVersion(0)]
	public RegexExpressionContext regexExpression() {
		RegexExpressionContext _localctx = new RegexExpressionContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_regexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			_la = _input.La(1);
			if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (12 - 12)) | (1L << (20 - 12)) | (1L << (66 - 12)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 767; Match(44);
			State = 768; _localctx.v = var();
			State = 769; Match(40);
			State = 770; _localctx.rex = Match(String);
			State = 773;
			_la = _input.La(1);
			if (_la==40) {
				{
				State = 771; Match(40);
				State = 772; _localctx.extraParam = Match(String);
				}
			}

			State = 775; Match(19);
			 _localctx.value = SparqlQuery.RegExpression(_localctx.v.p, (_localctx.rex!=null?_localctx.rex.Text:null), _localctx.extraParam==null ? null : (_localctx.extraParam!=null?_localctx.extraParam.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IRIrefOrFunctionContext : ParserRuleContext {
		public Func<SparqlResult, dynamic> value;
		public IRIrefContext _iRIref;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IRIrefOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_iRIrefOrFunction; }
	}

	[RuleVersion(0)]
	public IRIrefOrFunctionContext iRIrefOrFunction() {
		IRIrefOrFunctionContext _localctx = new IRIrefOrFunctionContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_iRIrefOrFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; _localctx._iRIref = iRIref();
			 
			int index=q.FilterConstants.Count;  
			q.FilterConstants.Add(_localctx._iRIref.value);
			  _localctx.value =  result=> q.FilterConstants[index].Value;  
			   
			State = 783;
			_la = _input.La(1);
			if (_la==44 || _la==NIL) {
				{
				State = 780; argList();
				 throw new Exception(); 
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RDFLiteralContext : ParserRuleContext {
		public SparqlLiteralNode value;
		public IToken _String;
		public IToken _LANGTAG;
		public IRIrefContext _iRIref;
		public ITerminalNode String() { return GetToken(sparql2PacNSParser.String, 0); }
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ITerminalNode LANGTAG() { return GetToken(sparql2PacNSParser.LANGTAG, 0); }
		public RDFLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rDFLiteral; }
	}

	[RuleVersion(0)]
	public RDFLiteralContext rDFLiteral() {
		RDFLiteralContext _localctx = new RDFLiteralContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_rDFLiteral);
		try {
			State = 795;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785; _localctx._String = Match(String);
				State = 786; _localctx._LANGTAG = Match(LANGTAG);

				var s1= (_localctx._String!=null?_localctx._String.Text:null);	 
				s1 = s1.Substring(1,s1.Length-2);
				_localctx.value =  new SparqlLiteralNode(null, s1, (_localctx._LANGTAG!=null?_localctx._LANGTAG.Text:null).ToLower());

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 788; _localctx._String = Match(String);
				State = 789; Match(14);
				State = 790; _localctx._iRIref = iRIref();

				 var s2= (_localctx._String!=null?_localctx._String.Text:null);	 
				s2 = s2.Substring(1,s2.Length-2);
				var t=_localctx._iRIref.value;
				 _localctx.value =  new SparqlLiteralNode(t, s2, null);

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 793; _localctx._String = Match(String);

				var s= (_localctx._String!=null?_localctx._String.Text:null);	 
				s = s.Substring(1,s.Length-2);
				_localctx.value =  new SparqlLiteralNode(null, s,null);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IRIrefContext : ParserRuleContext {
		public SparqlUriNode value;
		public IToken _IRI_REF;
		public IToken _PREFIXED_NAME;
		public ITerminalNode IRI_REF() { return GetToken(sparql2PacNSParser.IRI_REF, 0); }
		public ITerminalNode PREFIXED_NAME() { return GetToken(sparql2PacNSParser.PREFIXED_NAME, 0); }
		public IRIrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_iRIref; }
	}

	[RuleVersion(0)]
	public IRIrefContext iRIref() {
		IRIrefContext _localctx = new IRIrefContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_iRIref);
		try {
			State = 801;
			switch (_input.La(1)) {
			case IRI_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 797; _localctx._IRI_REF = Match(IRI_REF);
					
						var iri=(_localctx._IRI_REF!=null?_localctx._IRI_REF.Text:null);
						iri = iri.Substring(1, iri.Length - 2);
						//= q.ts.NameSpaceStore.FromFullName(iri);
						_localctx.value =  new SparqlUriNode{ Uri = new Uri(iri) };			
						 
				}
				break;
			case PREFIXED_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 799; _localctx._PREFIXED_NAME = Match(PREFIXED_NAME);
					
				var match = PrefixNSSlpit.Match((_localctx._PREFIXED_NAME!=null?_localctx._PREFIXED_NAME.Text:null));		            
				 _localctx.value =  new SparqlUriNode{Uri = new Uri(q.prefixes[match.Groups[1].Value] + match.Groups[2].Value)}; 
				 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		public double num;
		public NumericLiteralContext _numericLiteral;
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numeric; }
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_numeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803; _localctx._numericLiteral = numericLiteral();
			double value; string txt=(_localctx._numericLiteral!=null?_input.GetText(_localctx._numericLiteral.start,_localctx._numericLiteral.stop):null); if(!double.TryParse(txt, out value) && !double.TryParse(txt.Replace(".",","), out value)) throw new Exception("qe5645");   _localctx.num = value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode NumericLiteralPositive() { return GetToken(sparql2PacNSParser.NumericLiteralPositive, 0); }
		public NumericLiteralUnsignedContext numericLiteralUnsigned() {
			return GetRuleContext<NumericLiteralUnsignedContext>(0);
		}
		public ITerminalNode NumericLiteralNegative() { return GetToken(sparql2PacNSParser.NumericLiteralNegative, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericLiteral; }
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_numericLiteral);
		try {
			State = 809;
			switch (_input.La(1)) {
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 806; numericLiteralUnsigned();
				}
				break;
			case NumericLiteralPositive:
				EnterOuterAlt(_localctx, 2);
				{
				State = 807; Match(NumericLiteralPositive);
				}
				break;
			case NumericLiteralNegative:
				EnterOuterAlt(_localctx, 3);
				{
				State = 808; Match(NumericLiteralNegative);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralUnsignedContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(sparql2PacNSParser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(sparql2PacNSParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(sparql2PacNSParser.DECIMAL, 0); }
		public NumericLiteralUnsignedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericLiteralUnsigned; }
	}

	[RuleVersion(0)]
	public NumericLiteralUnsignedContext numericLiteralUnsigned() {
		NumericLiteralUnsignedContext _localctx = new NumericLiteralUnsignedContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_numericLiteralUnsigned);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			_la = _input.La(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (INTEGER - 86)) | (1L << (DECIMAL - 86)) | (1L << (DOUBLE - 86)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3o\x330\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x86\n\x2\x3\x3\x5\x3\x89\n\x3"+
		"\x3\x3\a\x3\x8C\n\x3\f\x3\xE\x3\x8F\v\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x9E\n\x6\x3\x6"+
		"\x3\x6\x3\x6\x6\x6\xA3\n\x6\r\x6\xE\x6\xA4\x3\x6\x3\x6\x5\x6\xA9\n\x6"+
		"\x3\x6\a\x6\xAC\n\x6\f\x6\xE\x6\xAF\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a"+
		"\x3\a\x3\a\a\a\xB8\n\a\f\a\xE\a\xBB\v\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x6\b\xC8\n\b\r\b\xE\b\xC9\x3\b\x3\b\x5\b\xCE"+
		"\n\b\x3\b\a\b\xD1\n\b\f\b\xE\b\xD4\v\b\x3\b\x5\b\xD7\n\b\x3\b\x3\b\x3"+
		"\b\x3\t\x3\t\a\t\xDE\n\t\f\t\xE\t\xE1\v\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x5\n\xE9\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x5\xE\xF3\n\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x5\xF\xF9\n\xF\x3\xF\x5\xF\xFC\n\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x5\x10\x103\n\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x5\x10\x10A\n\x10\x5\x10\x10C\n\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\a\x11\x115\n\x11\f\x11\xE\x11\x118\v\x11\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x11D\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x5\x12\x128\n\x12\x5\x12\x12A\n\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x5\x15\x138\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x140\n\x15\x3\x15\x5\x15\x143\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\x148"+
		"\n\x15\a\x15\x14A\n\x15\f\x15\xE\x15\x14D\v\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x157\n\x16\x5\x16\x159\n\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x164"+
		"\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x177\n"+
		"\x1A\f\x1A\xE\x1A\x17A\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x189\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\a\x1E\x198\n\x1E\f\x1E\xE\x1E\x19B\v\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x19F\n\x1E\x3\x1F\x3\x1F\x5\x1F\x1A3\n\x1F\x3\x1F\x3\x1F\x3"+
		" \x3 \x3 \x3 \x5 \x1AB\n \x5 \x1AD\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x5!\x1B7\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x1BF\n\"\a\"\x1C1\n\""+
		"\f\"\xE\"\x1C4\v\"\x3#\x3#\x3#\x5#\x1C9\n#\x3$\x3$\x3$\x3$\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\a%\x1D5\n%\f%\xE%\x1D8\v%\x3&\x3&\x3&\x3&\x3&\x5&\x1DF\n"+
		"&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x1E7\n\'\x3(\x3(\x3(\x3(\x3(\x3)"+
		"\x3)\x3)\x3)\x6)\x1F2\n)\r)\xE)\x1F3\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x5"+
		"*\x1FE\n*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x206\n+\x3,\x3,\x3,\x3,\x3,\x3,"+
		"\x5,\x20E\n,\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x216\n-\x3.\x3.\x3.\x3/\x3/\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x22C\n\x30\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\a\x31\x234\n\x31\f\x31\xE\x31\x237\v\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x23F\n\x32\f\x32\xE\x32\x242"+
		"\v\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x25E\n\x33\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\a\x34\x26E\n\x34\f\x34\xE\x34\x271\v\x34\x3"+
		"\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a"+
		"\x35\x27D\n\x35\f\x35\xE\x35\x280\v\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x5\x36\x291\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x5\x37\x2A7\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x5\x39\x2FF\n\x39\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x308\n:"+
		"\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x5;\x312\n;\x3<\x3<\x3<\x3<\x3<\x3<\x3"+
		"<\x3<\x3<\x3<\x5<\x31E\n<\x3=\x3=\x3=\x3=\x5=\x324\n=\x3>\x3>\x3>\x3?"+
		"\x3?\x3?\x5?\x32C\n?\x3@\x3@\x3@\x2\x2\x2\x41\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X"+
		"\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x2\n\x3\x2UV\x5\x2\x1E\x1E$$II\x4\x2\x36\x36?@\x6"+
		"\x2\x5\x5\x13\x14\x1A\x1A\x31\x31\x6\x2\x1D\x1D\x1F\x1F!!/\x30\x4\x2\x18"+
		"\x19\x34\x34\x5\x2\xE\xE\x16\x16\x44\x44\x3\x2XZ\x358\x2\x80\x3\x2\x2"+
		"\x2\x4\x88\x3\x2\x2\x2\x6\x90\x3\x2\x2\x2\b\x93\x3\x2\x2\x2\n\x98\x3\x2"+
		"\x2\x2\f\xB4\x3\x2\x2\x2\xE\xC0\x3\x2\x2\x2\x10\xDB\x3\x2\x2\x2\x12\xE5"+
		"\x3\x2\x2\x2\x14\xEA\x3\x2\x2\x2\x16\xEC\x3\x2\x2\x2\x18\xEF\x3\x2\x2"+
		"\x2\x1A\xF2\x3\x2\x2\x2\x1C\xF8\x3\x2\x2\x2\x1E\x10B\x3\x2\x2\x2 \x10D"+
		"\x3\x2\x2\x2\"\x129\x3\x2\x2\x2$\x12B\x3\x2\x2\x2&\x12F\x3\x2\x2\x2(\x133"+
		"\x3\x2\x2\x2*\x150\x3\x2\x2\x2,\x163\x3\x2\x2\x2.\x165\x3\x2\x2\x2\x30"+
		"\x16A\x3\x2\x2\x2\x32\x16F\x3\x2\x2\x2\x34\x17B\x3\x2\x2\x2\x36\x188\x3"+
		"\x2\x2\x2\x38\x18A\x3\x2\x2\x2:\x19E\x3\x2\x2\x2<\x1A0\x3\x2\x2\x2>\x1A6"+
		"\x3\x2\x2\x2@\x1B6\x3\x2\x2\x2\x42\x1B8\x3\x2\x2\x2\x44\x1C8\x3\x2\x2"+
		"\x2\x46\x1CA\x3\x2\x2\x2H\x1CE\x3\x2\x2\x2J\x1DE\x3\x2\x2\x2L\x1E6\x3"+
		"\x2\x2\x2N\x1E8\x3\x2\x2\x2P\x1ED\x3\x2\x2\x2R\x1FD\x3\x2\x2\x2T\x205"+
		"\x3\x2\x2\x2V\x20D\x3\x2\x2\x2X\x215\x3\x2\x2\x2Z\x217\x3\x2\x2\x2\\\x21A"+
		"\x3\x2\x2\x2^\x22B\x3\x2\x2\x2`\x22D\x3\x2\x2\x2\x62\x238\x3\x2\x2\x2"+
		"\x64\x243\x3\x2\x2\x2\x66\x25F\x3\x2\x2\x2h\x272\x3\x2\x2\x2j\x290\x3"+
		"\x2\x2\x2l\x2A6\x3\x2\x2\x2n\x2A8\x3\x2\x2\x2p\x2FE\x3\x2\x2\x2r\x300"+
		"\x3\x2\x2\x2t\x30C\x3\x2\x2\x2v\x31D\x3\x2\x2\x2x\x323\x3\x2\x2\x2z\x325"+
		"\x3\x2\x2\x2|\x32B\x3\x2\x2\x2~\x32D\x3\x2\x2\x2\x80\x85\x5\x4\x3\x2\x81"+
		"\x86\x5\n\x6\x2\x82\x86\x5\f\a\x2\x83\x86\x5\xE\b\x2\x84\x86\x5\x10\t"+
		"\x2\x85\x81\x3\x2\x2\x2\x85\x82\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x84"+
		"\x3\x2\x2\x2\x86\x3\x3\x2\x2\x2\x87\x89\x5\x6\x4\x2\x88\x87\x3\x2\x2\x2"+
		"\x88\x89\x3\x2\x2\x2\x89\x8D\x3\x2\x2\x2\x8A\x8C\x5\b\x5\x2\x8B\x8A\x3"+
		"\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2"+
		"\x8E\x5\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x91\a \x2\x2\x91\x92\aS\x2"+
		"\x2\x92\a\x3\x2\x2\x2\x93\x94\a\x12\x2\x2\x94\x95\aL\x2\x2\x95\x96\aS"+
		"\x2\x2\x96\x97\b\x5\x1\x2\x97\t\x3\x2\x2\x2\x98\x9D\a&\x2\x2\x99\x9A\a"+
		"\x3\x2\x2\x9A\x9E\b\x6\x1\x2\x9B\x9C\a;\x2\x2\x9C\x9E\b\x6\x1\x2\x9D\x99"+
		"\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\xA8\x3\x2\x2"+
		"\x2\x9F\xA0\x5\\/\x2\xA0\xA1\b\x6\x1\x2\xA1\xA3\x3\x2\x2\x2\xA2\x9F\x3"+
		"\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2"+
		"\xA5\xA9\x3\x2\x2\x2\xA6\xA7\a\b\x2\x2\xA7\xA9\b\x6\x1\x2\xA8\xA2\x3\x2"+
		"\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAD\x3\x2\x2\x2\xAA\xAC\x5\x12\n\x2\xAB"+
		"\xAA\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2"+
		"\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xB0\xB1\x5\x1A\xE\x2\xB1"+
		"\xB2\x5\x1C\xF\x2\xB2\xB3\b\x6\x1\x2\xB3\v\x3\x2\x2\x2\xB4\xB5\a>\x2\x2"+
		"\xB5\xB9\x5<\x1F\x2\xB6\xB8\x5\x12\n\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB\x3"+
		"\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2"+
		"\xBB\xB9\x3\x2\x2\x2\xBC\xBD\x5\x1A\xE\x2\xBD\xBE\x5\x1C\xF\x2\xBE\xBF"+
		"\b\a\x1\x2\xBF\r\x3\x2\x2\x2\xC0\xCD\a\x45\x2\x2\xC1\xC2\x5\\/\x2\xC2"+
		"\xC3\b\b\x1\x2\xC3\xC8\x3\x2\x2\x2\xC4\xC5\x5x=\x2\xC5\xC6\b\b\x1\x2\xC6"+
		"\xC8\x3\x2\x2\x2\xC7\xC1\x3\x2\x2\x2\xC7\xC4\x3\x2\x2\x2\xC8\xC9\x3\x2"+
		"\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCE\x3\x2\x2\x2\xCB"+
		"\xCC\a\b\x2\x2\xCC\xCE\b\b\x1\x2\xCD\xC7\x3\x2\x2\x2\xCD\xCB\x3\x2\x2"+
		"\x2\xCE\xD2\x3\x2\x2\x2\xCF\xD1\x5\x12\n\x2\xD0\xCF\x3\x2\x2\x2\xD1\xD4"+
		"\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD6\x3\x2\x2"+
		"\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD7\x5\x1A\xE\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7"+
		"\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xD9\x5\x1C\xF\x2\xD9\xDA\b\b\x1\x2"+
		"\xDA\xF\x3\x2\x2\x2\xDB\xDF\a\x37\x2\x2\xDC\xDE\x5\x12\n\x2\xDD\xDC\x3"+
		"\x2\x2\x2\xDE\xE1\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2"+
		"\xE0\xE2\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE2\xE3\x5\x1A\xE\x2\xE3\xE4"+
		"\b\t\x1\x2\xE4\x11\x3\x2\x2\x2\xE5\xE8\a\"\x2\x2\xE6\xE9\x5\x14\v\x2\xE7"+
		"\xE9\x5\x16\f\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE7\x3\x2\x2\x2\xE9\x13\x3\x2"+
		"\x2\x2\xEA\xEB\x5\x18\r\x2\xEB\x15\x3\x2\x2\x2\xEC\xED\aK\x2\x2\xED\xEE"+
		"\x5\x18\r\x2\xEE\x17\x3\x2\x2\x2\xEF\xF0\x5x=\x2\xF0\x19\x3\x2\x2\x2\xF1"+
		"\xF3\a\a\x2\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\x3\x2\x2"+
		"\x2\xF4\xF5\x5(\x15\x2\xF5\xF6\b\xE\x1\x2\xF6\x1B\x3\x2\x2\x2\xF7\xF9"+
		"\x5 \x11\x2\xF8\xF7\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFB\x3\x2\x2\x2"+
		"\xFA\xFC\x5\x1E\x10\x2\xFB\xFA\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\x1D"+
		"\x3\x2\x2\x2\xFD\xFE\x5$\x13\x2\xFE\x102\b\x10\x1\x2\xFF\x100\x5&\x14"+
		"\x2\x100\x101\b\x10\x1\x2\x101\x103\x3\x2\x2\x2\x102\xFF\x3\x2\x2\x2\x102"+
		"\x103\x3\x2\x2\x2\x103\x10C\x3\x2\x2\x2\x104\x105\x5&\x14\x2\x105\x109"+
		"\b\x10\x1\x2\x106\x107\x5$\x13\x2\x107\x108\b\x10\x1\x2\x108\x10A\x3\x2"+
		"\x2\x2\x109\x106\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10C\x3\x2\x2"+
		"\x2\x10B\xFD\x3\x2\x2\x2\x10B\x104\x3\x2\x2\x2\x10C\x1F\x3\x2\x2\x2\x10D"+
		"\x10E\a\x11\x2\x2\x10E\x10F\a)\x2\x2\x10F\x110\x5\"\x12\x2\x110\x116\b"+
		"\x11\x1\x2\x111\x112\x5\"\x12\x2\x112\x113\b\x11\x1\x2\x113\x115\x3\x2"+
		"\x2\x2\x114\x111\x3\x2\x2\x2\x115\x118\x3\x2\x2\x2\x116\x114\x3\x2\x2"+
		"\x2\x116\x117\x3\x2\x2\x2\x117!\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x119"+
		"\x11D\a,\x2\x2\x11A\x11B\a\x1B\x2\x2\x11B\x11D\b\x12\x1\x2\x11C\x119\x3"+
		"\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x11F\x5n\x38"+
		"\x2\x11F\x120\b\x12\x1\x2\x120\x12A\x3\x2\x2\x2\x121\x122\x5\x36\x1C\x2"+
		"\x122\x123\b\x12\x1\x2\x123\x128\x3\x2\x2\x2\x124\x125\x5Z.\x2\x125\x126"+
		"\b\x12\x1\x2\x126\x128\x3\x2\x2\x2\x127\x121\x3\x2\x2\x2\x127\x124\x3"+
		"\x2\x2\x2\x128\x12A\x3\x2\x2\x2\x129\x11C\x3\x2\x2\x2\x129\x127\x3\x2"+
		"\x2\x2\x12A#\x3\x2\x2\x2\x12B\x12C\a\x46\x2\x2\x12C\x12D\aX\x2\x2\x12D"+
		"\x12E\b\x13\x1\x2\x12E%\x3\x2\x2\x2\x12F\x130\a+\x2\x2\x130\x131\aX\x2"+
		"\x2\x131\x132\b\x14\x1\x2\x132\'\x3\x2\x2\x2\x133\x137\a\x33\x2\x2\x134"+
		"\x135\x5*\x16\x2\x135\x136\b\x15\x1\x2\x136\x138\x3\x2\x2\x2\x137\x134"+
		"\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x14B\x3\x2\x2\x2\x139\x13A\x5"+
		",\x17\x2\x13A\x13B\b\x15\x1\x2\x13B\x140\x3\x2\x2\x2\x13C\x13D\x5\x34"+
		"\x1B\x2\x13D\x13E\b\x15\x1\x2\x13E\x140\x3\x2\x2\x2\x13F\x139\x3\x2\x2"+
		"\x2\x13F\x13C\x3\x2\x2\x2\x140\x142\x3\x2\x2\x2\x141\x143\a:\x2\x2\x142"+
		"\x141\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x147\x3\x2\x2\x2\x144\x145"+
		"\x5*\x16\x2\x145\x146\b\x15\x1\x2\x146\x148\x3\x2\x2\x2\x147\x144\x3\x2"+
		"\x2\x2\x147\x148\x3\x2\x2\x2\x148\x14A\x3\x2\x2\x2\x149\x13F\x3\x2\x2"+
		"\x2\x14A\x14D\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2"+
		"\x14C\x14E\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14E\x14F\a\xF\x2\x2\x14F"+
		")\x3\x2\x2\x2\x150\x151\x5@!\x2\x151\x158\b\x16\x1\x2\x152\x156\a:\x2"+
		"\x2\x153\x154\x5*\x16\x2\x154\x155\b\x16\x1\x2\x155\x157\x3\x2\x2\x2\x156"+
		"\x153\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x159\x3\x2\x2\x2\x158\x152"+
		"\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159+\x3\x2\x2\x2\x15A\x15B\x5.\x18"+
		"\x2\x15B\x15C\b\x17\x1\x2\x15C\x164\x3\x2\x2\x2\x15D\x15E\x5\x32\x1A\x2"+
		"\x15E\x15F\b\x17\x1\x2\x15F\x164\x3\x2\x2\x2\x160\x161\x5\x30\x19\x2\x161"+
		"\x162\b\x17\x1\x2\x162\x164\x3\x2\x2\x2\x163\x15A\x3\x2\x2\x2\x163\x15D"+
		"\x3\x2\x2\x2\x163\x160\x3\x2\x2\x2\x164-\x3\x2\x2\x2\x165\x166\a(\x2\x2"+
		"\x166\x167\b\x18\x1\x2\x167\x168\x5(\x15\x2\x168\x169\b\x18\x1\x2\x169"+
		"/\x3\x2\x2\x2\x16A\x16B\a\x38\x2\x2\x16B\x16C\x5X-\x2\x16C\x16D\x5(\x15"+
		"\x2\x16D\x16E\b\x19\x1\x2\x16E\x31\x3\x2\x2\x2\x16F\x170\b\x1A\x1\x2\x170"+
		"\x171\x5(\x15\x2\x171\x178\b\x1A\x1\x2\x172\x173\aJ\x2\x2\x173\x174\x5"+
		"(\x15\x2\x174\x175\b\x1A\x1\x2\x175\x177\x3\x2\x2\x2\x176\x172\x3\x2\x2"+
		"\x2\x177\x17A\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2"+
		"\x179\x33\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17B\x17C\a\t\x2\x2\x17C\x17D"+
		"\x5\x36\x1C\x2\x17D\x17E\b\x1B\x1\x2\x17E\x35\x3\x2\x2\x2\x17F\x180\x5"+
		"n\x38\x2\x180\x181\b\x1C\x1\x2\x181\x189\x3\x2\x2\x2\x182\x183\x5p\x39"+
		"\x2\x183\x184\b\x1C\x1\x2\x184\x189\x3\x2\x2\x2\x185\x186\x5\x38\x1D\x2"+
		"\x186\x187\b\x1C\x1\x2\x187\x189\x3\x2\x2\x2\x188\x17F\x3\x2\x2\x2\x188"+
		"\x182\x3\x2\x2\x2\x188\x185\x3\x2\x2\x2\x189\x37\x3\x2\x2\x2\x18A\x18B"+
		"\x5x=\x2\x18B\x18C\x5:\x1E\x2\x18C\x18D\b\x1D\x1\x2\x18D\x39\x3\x2\x2"+
		"\x2\x18E\x18F\ag\x2\x2\x18F\x19F\b\x1E\x1\x2\x190\x191\a.\x2\x2\x191\x192"+
		"\x5`\x31\x2\x192\x199\b\x1E\x1\x2\x193\x194\a*\x2\x2\x194\x195\x5`\x31"+
		"\x2\x195\x196\b\x1E\x1\x2\x196\x198\x3\x2\x2\x2\x197\x193\x3\x2\x2\x2"+
		"\x198\x19B\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A"+
		"\x19C\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19C\x19D\a\x15\x2\x2\x19D\x19F"+
		"\x3\x2\x2\x2\x19E\x18E\x3\x2\x2\x2\x19E\x190\x3\x2\x2\x2\x19F;\x3\x2\x2"+
		"\x2\x1A0\x1A2\a\x33\x2\x2\x1A1\x1A3\x5> \x2\x1A2\x1A1\x3\x2\x2\x2\x1A2"+
		"\x1A3\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A5\a\xF\x2\x2\x1A5=\x3"+
		"\x2\x2\x2\x1A6\x1A7\x5@!\x2\x1A7\x1AC\b \x1\x2\x1A8\x1AA\a:\x2\x2\x1A9"+
		"\x1AB\x5> \x2\x1AA\x1A9\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AD\x3"+
		"\x2\x2\x2\x1AC\x1A8\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD?\x3\x2\x2\x2"+
		"\x1AE\x1AF\x5T+\x2\x1AF\x1B0\x5\x42\"\x2\x1B0\x1B1\b!\x1\x2\x1B1\x1B7"+
		"\x3\x2\x2\x2\x1B2\x1B3\x5L\'\x2\x1B3\x1B4\x5\x44#\x2\x1B4\x1B5\b!\x1\x2"+
		"\x1B5\x1B7\x3\x2\x2\x2\x1B6\x1AE\x3\x2\x2\x2\x1B6\x1B2\x3\x2\x2\x2\x1B7"+
		"\x41\x3\x2\x2\x2\x1B8\x1B9\x5\x46$\x2\x1B9\x1C2\b\"\x1\x2\x1BA\x1BE\a"+
		"=\x2\x2\x1BB\x1BC\x5\x46$\x2\x1BC\x1BD\b\"\x1\x2\x1BD\x1BF\x3\x2\x2\x2"+
		"\x1BE\x1BB\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C1\x3\x2\x2\x2\x1C0"+
		"\x1BA\x3\x2\x2\x2\x1C1\x1C4\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C2\x1C3"+
		"\x3\x2\x2\x2\x1C3\x43\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C5\x1C6\x5\x42"+
		"\"\x2\x1C6\x1C7\b#\x1\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C5\x3\x2\x2\x2\x1C8"+
		"\x1C9\x3\x2\x2\x2\x1C9\x45\x3\x2\x2\x2\x1CA\x1CB\x5J&\x2\x1CB\x1CC\x5"+
		"H%\x2\x1CC\x1CD\b$\x1\x2\x1CDG\x3\x2\x2\x2\x1CE\x1CF\x5R*\x2\x1CF\x1D6"+
		"\b%\x1\x2\x1D0\x1D1\a*\x2\x2\x1D1\x1D2\x5R*\x2\x1D2\x1D3\b%\x1\x2\x1D3"+
		"\x1D5\x3\x2\x2\x2\x1D4\x1D0\x3\x2\x2\x2\x1D5\x1D8\x3\x2\x2\x2\x1D6\x1D4"+
		"\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7I\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2"+
		"\x2\x1D9\x1DA\x5X-\x2\x1DA\x1DB\b&\x1\x2\x1DB\x1DF\x3\x2\x2\x2\x1DC\x1DD"+
		"\a\x39\x2\x2\x1DD\x1DF\b&\x1\x2\x1DE\x1D9\x3\x2\x2\x2\x1DE\x1DC\x3\x2"+
		"\x2\x2\x1DFK\x3\x2\x2\x2\x1E0\x1E1\x5P)\x2\x1E1\x1E2\b\'\x1\x2\x1E2\x1E7"+
		"\x3\x2\x2\x2\x1E3\x1E4\x5N(\x2\x1E4\x1E5\b\'\x1\x2\x1E5\x1E7\x3\x2\x2"+
		"\x2\x1E6\x1E0\x3\x2\x2\x2\x1E6\x1E3\x3\x2\x2\x2\x1E7M\x3\x2\x2\x2\x1E8"+
		"\x1E9\a\x6\x2\x2\x1E9\x1EA\x5\x42\"\x2\x1EA\x1EB\a\'\x2\x2\x1EB\x1EC\b"+
		"(\x1\x2\x1ECO\x3\x2\x2\x2\x1ED\x1F1\a.\x2\x2\x1EE\x1EF\x5R*\x2\x1EF\x1F0"+
		"\b)\x1\x2\x1F0\x1F2\x3\x2\x2\x2\x1F1\x1EE\x3\x2\x2\x2\x1F2\x1F3\x3\x2"+
		"\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2"+
		"\x2\x1F5\x1F6\a\x15\x2\x2\x1F6Q\x3\x2\x2\x2\x1F7\x1F8\x5V,\x2\x1F8\x1F9"+
		"\b*\x1\x2\x1F9\x1FE\x3\x2\x2\x2\x1FA\x1FB\x5L\'\x2\x1FB\x1FC\b*\x1\x2"+
		"\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1F7\x3\x2\x2\x2\x1FD\x1FA\x3\x2\x2\x2\x1FE"+
		"S\x3\x2\x2\x2\x1FF\x200\x5Z.\x2\x200\x201\b+\x1\x2\x201\x206\x3\x2\x2"+
		"\x2\x202\x203\x5^\x30\x2\x203\x204\b+\x1\x2\x204\x206\x3\x2\x2\x2\x205"+
		"\x1FF\x3\x2\x2\x2\x205\x202\x3\x2\x2\x2\x206U\x3\x2\x2\x2\x207\x208\x5"+
		"Z.\x2\x208\x209\b,\x1\x2\x209\x20E\x3\x2\x2\x2\x20A\x20B\x5^\x30\x2\x20B"+
		"\x20C\b,\x1\x2\x20C\x20E\x3\x2\x2\x2\x20D\x207\x3\x2\x2\x2\x20D\x20A\x3"+
		"\x2\x2\x2\x20EW\x3\x2\x2\x2\x20F\x210\x5Z.\x2\x210\x211\b-\x1\x2\x211"+
		"\x216\x3\x2\x2\x2\x212\x213\x5x=\x2\x213\x214\b-\x1\x2\x214\x216\x3\x2"+
		"\x2\x2\x215\x20F\x3\x2\x2\x2\x215\x212\x3\x2\x2\x2\x216Y\x3\x2\x2\x2\x217"+
		"\x218\x5\\/\x2\x218\x219\b.\x1\x2\x219[\x3\x2\x2\x2\x21A\x21B\t\x2\x2"+
		"\x2\x21B]\x3\x2\x2\x2\x21C\x21D\x5x=\x2\x21D\x21E\b\x30\x1\x2\x21E\x22C"+
		"\x3\x2\x2\x2\x21F\x220\x5v<\x2\x220\x221\b\x30\x1\x2\x221\x22C\x3\x2\x2"+
		"\x2\x222\x223\x5z>\x2\x223\x224\b\x30\x1\x2\x224\x22C\x3\x2\x2\x2\x225"+
		"\x226\aP\x2\x2\x226\x22C\b\x30\x1\x2\x227\x228\aR\x2\x2\x228\x22C\b\x30"+
		"\x1\x2\x229\x22A\ag\x2\x2\x22A\x22C\b\x30\x1\x2\x22B\x21C\x3\x2\x2\x2"+
		"\x22B\x21F\x3\x2\x2\x2\x22B\x222\x3\x2\x2\x2\x22B\x225\x3\x2\x2\x2\x22B"+
		"\x227\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22C_\x3\x2\x2\x2\x22D\x22E\x5"+
		"\x62\x32\x2\x22E\x235\b\x31\x1\x2\x22F\x230\a\x42\x2\x2\x230\x231\x5\x62"+
		"\x32\x2\x231\x232\b\x31\x1\x2\x232\x234\x3\x2\x2\x2\x233\x22F\x3\x2\x2"+
		"\x2\x234\x237\x3\x2\x2\x2\x235\x233\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2"+
		"\x236\x61\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x238\x239\x5\x64\x33\x2\x239"+
		"\x240\b\x32\x1\x2\x23A\x23B\a\x41\x2\x2\x23B\x23C\x5\x64\x33\x2\x23C\x23D"+
		"\b\x32\x1\x2\x23D\x23F\x3\x2\x2\x2\x23E\x23A\x3\x2\x2\x2\x23F\x242\x3"+
		"\x2\x2\x2\x240\x23E\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x63\x3\x2\x2"+
		"\x2\x242\x240\x3\x2\x2\x2\x243\x244\x5\x66\x34\x2\x244\x25D\b\x33\x1\x2"+
		"\x245\x246\a\x1C\x2\x2\x246\x247\x5\x66\x34\x2\x247\x248\b\x33\x1\x2\x248"+
		"\x25E\x3\x2\x2\x2\x249\x24A\a\f\x2\x2\x24A\x24B\x5\x66\x34\x2\x24B\x24C"+
		"\b\x33\x1\x2\x24C\x25E\x3\x2\x2\x2\x24D\x24E\a\n\x2\x2\x24E\x24F\x5\x66"+
		"\x34\x2\x24F\x250\b\x33\x1\x2\x250\x25E\x3\x2\x2\x2\x251\x252\a\x43\x2"+
		"\x2\x252\x253\x5\x66\x34\x2\x253\x254\b\x33\x1\x2\x254\x25E\x3\x2\x2\x2"+
		"\x255\x256\a\r\x2\x2\x256\x257\x5\x66\x34\x2\x257\x258\b\x33\x1\x2\x258"+
		"\x25E\x3\x2\x2\x2\x259\x25A\aH\x2\x2\x25A\x25B\x5\x66\x34\x2\x25B\x25C"+
		"\b\x33\x1\x2\x25C\x25E\x3\x2\x2\x2\x25D\x245\x3\x2\x2\x2\x25D\x249\x3"+
		"\x2\x2\x2\x25D\x24D\x3\x2\x2\x2\x25D\x251\x3\x2\x2\x2\x25D\x255\x3\x2"+
		"\x2\x2\x25D\x259\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x65\x3\x2\x2\x2"+
		"\x25F\x260\x5h\x35\x2\x260\x26F\b\x34\x1\x2\x261\x262\a<\x2\x2\x262\x263"+
		"\x5h\x35\x2\x263\x264\b\x34\x1\x2\x264\x26E\x3\x2\x2\x2\x265\x266\a-\x2"+
		"\x2\x266\x267\x5h\x35\x2\x267\x268\b\x34\x1\x2\x268\x26E\x3\x2\x2\x2\x269"+
		"\x26A\aN\x2\x2\x26A\x26E\b\x34\x1\x2\x26B\x26C\aO\x2\x2\x26C\x26E\b\x34"+
		"\x1\x2\x26D\x261\x3\x2\x2\x2\x26D\x265\x3\x2\x2\x2\x26D\x269\x3\x2\x2"+
		"\x2\x26D\x26B\x3\x2\x2\x2\x26E\x271\x3\x2\x2\x2\x26F\x26D\x3\x2\x2\x2"+
		"\x26F\x270\x3\x2\x2\x2\x270g\x3\x2\x2\x2\x271\x26F\x3\x2\x2\x2\x272\x273"+
		"\x5j\x36\x2\x273\x27E\b\x35\x1\x2\x274\x275\a\b\x2\x2\x275\x276\x5j\x36"+
		"\x2\x276\x277\b\x35\x1\x2\x277\x27D\x3\x2\x2\x2\x278\x279\aG\x2\x2\x279"+
		"\x27A\x5j\x36\x2\x27A\x27B\b\x35\x1\x2\x27B\x27D\x3\x2\x2\x2\x27C\x274"+
		"\x3\x2\x2\x2\x27C\x278\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2\x27E\x27C\x3"+
		"\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27Fi\x3\x2\x2\x2\x280\x27E\x3\x2\x2\x2"+
		"\x281\x282\a%\x2\x2\x282\x283\x5l\x37\x2\x283\x284\b\x36\x1\x2\x284\x291"+
		"\x3\x2\x2\x2\x285\x286\a<\x2\x2\x286\x287\x5l\x37\x2\x287\x288\b\x36\x1"+
		"\x2\x288\x291\x3\x2\x2\x2\x289\x28A\a-\x2\x2\x28A\x28B\x5l\x37\x2\x28B"+
		"\x28C\b\x36\x1\x2\x28C\x291\x3\x2\x2\x2\x28D\x28E\x5l\x37\x2\x28E\x28F"+
		"\b\x36\x1\x2\x28F\x291\x3\x2\x2\x2\x290\x281\x3\x2\x2\x2\x290\x285\x3"+
		"\x2\x2\x2\x290\x289\x3\x2\x2\x2\x290\x28D\x3\x2\x2\x2\x291k\x3\x2\x2\x2"+
		"\x292\x293\x5n\x38\x2\x293\x294\b\x37\x1\x2\x294\x2A7\x3\x2\x2\x2\x295"+
		"\x296\x5p\x39\x2\x296\x297\b\x37\x1\x2\x297\x2A7\x3\x2\x2\x2\x298\x299"+
		"\x5t;\x2\x299\x29A\b\x37\x1\x2\x29A\x2A7\x3\x2\x2\x2\x29B\x29C\x5v<\x2"+
		"\x29C\x29D\b\x37\x1\x2\x29D\x2A7\x3\x2\x2\x2\x29E\x29F\x5z>\x2\x29F\x2A0"+
		"\b\x37\x1\x2\x2A0\x2A7\x3\x2\x2\x2\x2A1\x2A2\aP\x2\x2\x2A2\x2A7\b\x37"+
		"\x1\x2\x2A3\x2A4\x5Z.\x2\x2A4\x2A5\b\x37\x1\x2\x2A5\x2A7\x3\x2\x2\x2\x2A6"+
		"\x292\x3\x2\x2\x2\x2A6\x295\x3\x2\x2\x2\x2A6\x298\x3\x2\x2\x2\x2A6\x29B"+
		"\x3\x2\x2\x2\x2A6\x29E\x3\x2\x2\x2\x2A6\x2A1\x3\x2\x2\x2\x2A6\x2A3\x3"+
		"\x2\x2\x2\x2A7m\x3\x2\x2\x2\x2A8\x2A9\a.\x2\x2\x2A9\x2AA\x5`\x31\x2\x2AA"+
		"\x2AB\a\x15\x2\x2\x2AB\x2AC\b\x38\x1\x2\x2ACo\x3\x2\x2\x2\x2AD\x2AE\t"+
		"\x3\x2\x2\x2AE\x2AF\a.\x2\x2\x2AF\x2B0\x5`\x31\x2\x2B0\x2B1\a\x15\x2\x2"+
		"\x2B1\x2B2\b\x39\x1\x2\x2B2\x2FF\x3\x2\x2\x2\x2B3\x2B4\t\x4\x2\x2\x2B4"+
		"\x2B5\a.\x2\x2\x2B5\x2B6\x5v<\x2\x2B6\x2B7\a\x15\x2\x2\x2B7\x2B8\b\x39"+
		"\x1\x2\x2B8\x2FF\x3\x2\x2\x2\x2B9\x2BA\t\x4\x2\x2\x2BA\x2BB\a.\x2\x2\x2BB"+
		"\x2BC\x5Z.\x2\x2BC\x2BD\a\x15\x2\x2\x2BD\x2BE\b\x39\x1\x2\x2BE\x2FF\x3"+
		"\x2\x2\x2\x2BF\x2C0\t\x5\x2\x2\x2C0\x2C1\a.\x2\x2\x2C1\x2C2\x5`\x31\x2"+
		"\x2C2\x2C3\a*\x2\x2\x2C3\x2C4\a\x17\x2\x2\x2C4\x2C5\a\x15\x2\x2\x2C5\x2C6"+
		"\b\x39\x1\x2\x2C6\x2FF\x3\x2\x2\x2\x2C7\x2C8\t\x5\x2\x2\x2C8\x2C9\a.\x2"+
		"\x2\x2C9\x2CA\x5`\x31\x2\x2CA\x2CB\a*\x2\x2\x2CB\x2CC\x5`\x31\x2\x2CC"+
		"\x2CD\a\x15\x2\x2\x2CD\x2CE\b\x39\x1\x2\x2CE\x2FF\x3\x2\x2\x2\x2CF\x2D0"+
		"\t\x6\x2\x2\x2D0\x2D1\a.\x2\x2\x2D1\x2D2\x5`\x31\x2\x2D2\x2D3\a\x15\x2"+
		"\x2\x2D3\x2D4\b\x39\x1\x2\x2D4\x2FF\x3\x2\x2\x2\x2D5\x2D6\t\a\x2\x2\x2D6"+
		"\x2D7\a.\x2\x2\x2D7\x2D8\x5Z.\x2\x2D8\x2D9\a\x15\x2\x2\x2D9\x2DA\b\x39"+
		"\x1\x2\x2DA\x2FF\x3\x2\x2\x2\x2DB\x2DC\a#\x2\x2\x2DC\x2DD\a.\x2\x2\x2DD"+
		"\x2DE\x5`\x31\x2\x2DE\x2DF\a*\x2\x2\x2DF\x2E0\x5`\x31\x2\x2E0\x2E1\a\x15"+
		"\x2\x2\x2E1\x2E2\b\x39\x1\x2\x2E2\x2FF\x3\x2\x2\x2\x2E3\x2E4\a\v\x2\x2"+
		"\x2E4\x2E5\a.\x2\x2\x2E5\x2E6\x5`\x31\x2\x2E6\x2E7\a\x15\x2\x2\x2E7\x2E8"+
		"\b\x39\x1\x2\x2E8\x2FF\x3\x2\x2\x2\x2E9\x2EA\a\x32\x2\x2\x2EA\x2EB\a."+
		"\x2\x2\x2EB\x2EC\x5`\x31\x2\x2EC\x2ED\a\x15\x2\x2\x2ED\x2EE\b\x39\x1\x2"+
		"\x2EE\x2FF\x3\x2\x2\x2\x2EF\x2F0\a\x4\x2\x2\x2F0\x2F1\a.\x2\x2\x2F1\x2F2"+
		"\x5`\x31\x2\x2F2\x2F3\a\x15\x2\x2\x2F3\x2F4\b\x39\x1\x2\x2F4\x2FF\x3\x2"+
		"\x2\x2\x2F5\x2F6\a\x35\x2\x2\x2F6\x2F7\a.\x2\x2\x2F7\x2F8\x5`\x31\x2\x2F8"+
		"\x2F9\a\x15\x2\x2\x2F9\x2FA\b\x39\x1\x2\x2FA\x2FF\x3\x2\x2\x2\x2FB\x2FC"+
		"\x5r:\x2\x2FC\x2FD\b\x39\x1\x2\x2FD\x2FF\x3\x2\x2\x2\x2FE\x2AD\x3\x2\x2"+
		"\x2\x2FE\x2B3\x3\x2\x2\x2\x2FE\x2B9\x3\x2\x2\x2\x2FE\x2BF\x3\x2\x2\x2"+
		"\x2FE\x2C7\x3\x2\x2\x2\x2FE\x2CF\x3\x2\x2\x2\x2FE\x2D5\x3\x2\x2\x2\x2FE"+
		"\x2DB\x3\x2\x2\x2\x2FE\x2E3\x3\x2\x2\x2\x2FE\x2E9\x3\x2\x2\x2\x2FE\x2EF"+
		"\x3\x2\x2\x2\x2FE\x2F5\x3\x2\x2\x2\x2FE\x2FB\x3\x2\x2\x2\x2FFq\x3\x2\x2"+
		"\x2\x300\x301\t\b\x2\x2\x301\x302\a.\x2\x2\x302\x303\x5Z.\x2\x303\x304"+
		"\a*\x2\x2\x304\x307\aQ\x2\x2\x305\x306\a*\x2\x2\x306\x308\aQ\x2\x2\x307"+
		"\x305\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30A"+
		"\a\x15\x2\x2\x30A\x30B\b:\x1\x2\x30Bs\x3\x2\x2\x2\x30C\x30D\x5x=\x2\x30D"+
		"\x311\b;\x1\x2\x30E\x30F\x5:\x1E\x2\x30F\x310\b;\x1\x2\x310\x312\x3\x2"+
		"\x2\x2\x311\x30E\x3\x2\x2\x2\x311\x312\x3\x2\x2\x2\x312u\x3\x2\x2\x2\x313"+
		"\x314\aQ\x2\x2\x314\x315\aW\x2\x2\x315\x31E\b<\x1\x2\x316\x317\aQ\x2\x2"+
		"\x317\x318\a\x10\x2\x2\x318\x319\x5x=\x2\x319\x31A\b<\x1\x2\x31A\x31E"+
		"\x3\x2\x2\x2\x31B\x31C\aQ\x2\x2\x31C\x31E\b<\x1\x2\x31D\x313\x3\x2\x2"+
		"\x2\x31D\x316\x3\x2\x2\x2\x31D\x31B\x3\x2\x2\x2\x31Ew\x3\x2\x2\x2\x31F"+
		"\x320\aS\x2\x2\x320\x324\b=\x1\x2\x321\x322\aM\x2\x2\x322\x324\b=\x1\x2"+
		"\x323\x31F\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2\x324y\x3\x2\x2\x2\x325\x326"+
		"\x5|?\x2\x326\x327\b>\x1\x2\x327{\x3\x2\x2\x2\x328\x32C\x5~@\x2\x329\x32C"+
		"\aN\x2\x2\x32A\x32C\aO\x2\x2\x32B\x328\x3\x2\x2\x2\x32B\x329\x3\x2\x2"+
		"\x2\x32B\x32A\x3\x2\x2\x2\x32C}\x3\x2\x2\x2\x32D\x32E\t\t\x2\x2\x32E\x7F"+
		"\x3\x2\x2\x2\x46\x85\x88\x8D\x9D\xA4\xA8\xAD\xB9\xC7\xC9\xCD\xD2\xD6\xDF"+
		"\xE8\xF2\xF8\xFB\x102\x109\x10B\x116\x11C\x127\x129\x137\x13F\x142\x147"+
		"\x14B\x156\x158\x163\x178\x188\x199\x19E\x1A2\x1AA\x1AC\x1B6\x1BE\x1C2"+
		"\x1C8\x1D6\x1DE\x1E6\x1F3\x1FD\x205\x20D\x215\x22B\x235\x240\x25D\x26D"+
		"\x26F\x27C\x27E\x290\x2A6\x2FE\x307\x311\x31D\x323\x32B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SparqlParseRun
