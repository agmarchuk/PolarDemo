Проект NameTable

Предназначен для построения таблицы имен. Таблица имен представляет собой множество пар <строка, код>
в котором и строка и код являются уникальными, т.е. однократно использованными. На данном этапе кодирование
производится целыми неотрицательными числами, перечисляющими внесенные идентификаторы. Перечисление сплошное,
без пропусков. Таблица имен представляет также быстрый (Log(N)) перевод из строки в код и обратно, из кода
в строку. 

Таблица имен имеет две фазы работы: фазу заполнения и фазу использования. Фаз заполнения может быть много.
При этом, новые имена (строки) добавляеются к имеющимся. После завершения фазы заполнения (ввода), таблица
находится в фазе использования. Кроме того, фаза заполнения, формирует словарь
Dictionary<string, int> 
В который помещаются пары <строка, код>, только тех строк, которые вводились в течении данной фазы кодирования.
Это нужно для того, чтобы обрабатывая очередную порцию информации, можно было бы сначала перевести имена данной
порции в коды, а потом, выполнить преобразование данных в структурыне построения, использующие коды имеющихся
в порции имен.

Реализация (StringIntCoding)

Имеется основная таблица кодирования, реализованная в виде PaCell, которая содержит последовательность пар
{code: int, name: string}, отсортированную по полю name. В начальный момент таблица содержит 0 элементов. 
Имеется два индекса, т.е. две последовательности длинных целых, представляющих offset'ы элементов в основной 
таблице. Первый индекс отсортирован по полю name, второй - по полю code. 

Имеются методы работы в фазе использования:
int GetCode(string name);
string GetName(int code);
И еще какие-нибудь полезные методы. 

Имеется метод внесения новой порции:
Dictionary<string, int> InsertPortion(IEnumerable<string> portion);

portion - набор вводимых идентификаторов, набор может включать новые, уже введенные и дубли, набор не упорядочен.
Результатом работы метода является словарь содержащий, как минимум, множество пар имя-код по тем идентификаторам,
которые пришли в списке ввода. 
   
Это дорогостоящий по затратам времени метод. Время его выполнения O(N + K) + O(K * Log(K)), где N - предыдущее
количество идентификаторов, K - общее число добавляемых идентификторов. 
В то же время, размер вводимой порции неявно лимитируется возможностью создания результирующего словаря в
оперативной памяти. 

После завершения метода, таблица имен может быть использована в регулярном режиме. 

 


