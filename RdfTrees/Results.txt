20140601
День защиты детей. Наконец, я серьезно собрался делать новый проект. Сделал основу, начал тестировать.
Тестирование пока провожу на домашнем компьютере и на 1М триплетов. 
Загрузка 4.8 сек., доп.файлы 1.27 сек.

Если сделать файл otriples_op с помощью копирования, то было 1.27. Если формировать поэлементно, стало 1.8 сек.
Восстановлю с копированием.

Реализовал сортировки. Сортируются массивы otriples, otriples_op, dtriples_sp
Времена выполнеиня сортировок: 1.5, 1.7, 1.7 сек.

20140602
Заработала программа формирования дерева EntitiesTree, пока делается ячейка в свободном формате.

1 млн. триплетов. Загрузка 2.26 сек., доп. файл 659, сортировки 875, 958, 953 мс.
Объединяющее сканирование 9.9 сек. 
База данных:
otriples, dtriples 5.62, 53 Мб.
Дополнительные файлы 13.7 Мб.
Полученный tree_free.pac 16.5 Мб.

10 млн. триплетов
Почти все цифры увеличены в 10 раз. Загрузка 31.5 сек., сортировки - по 10 сек. Слияние 97 сек.

100 млн. триплетов
Слияние 960 сек. Пока достаточно. Надо попробовать продвинуться дальше.

Сейчас сделаю коммит и перейду на домашний компьютер. А на рабочем - запущу тест на 1 млрд. 

1 млрд. триплетов
Много часов... Слияние выполнялось около 3 часов. Это слишком долго. Надо изменить схему слияния
и посмотреть что получится. 

В качестве эксперимента, выполнил формирование базы данных проектом TrueRdfViewer. 
Загрузка производилась почти 5 часов. Это коррелирует с аналогичной скоростью для RdfTrees.

20140604
Ищу причину медленности слияния трех массивов в дерево.
Просканировал через ElementValues() ячейку otriples. Время сканирования 120-133 мс.
А при слиянии, время сканирования (правда другого) 6 сек. Это недопустимо (?) много.
Как ни странно, отдельно запущенный DiapasonScanner работает довольно быстро. 341 мс. при 425 тыс.
сканирований. Надо сформировать план поиска неэффективного места.

Теперь сканирую три нужных последовательность. Простое сканирование, дает просто утроение - 1070 мс.
Время практически не изменилось при вложенном (по идентификатору и по свойству) сканировании.
Время сразу изменилось более, чем на 2 сек. при дополнительном наборе действий для direct.

Пока прервуcь на написание отзывов.  
 
Написал. Можно продолжить. 

Выявил проблему и научился ее устранять. Как всегда, дело в "метании" головки чтения. Модифицировал
DiapasonScanner так, чтобы читать данные только один раз. И подряд!

Уже то ли поздняя ночь, то ли раннее утро. Кажется, получилось!!! Теперь слияние для получения дерева в свободном
формате занимает полторы сек. 1560 мс.

Теперь осталось только сформировать ячейку в фиксированном формате. Для этого, попробую сначала, путем
"легкого" слияния подсчитать количество элементов в дереве сущностей. Потом заведу метод в PolarDB,
позволяющий сделать массив из требуемого числа элементов. И потом построенные объектные представления
элементов (дерева) присвою ячейкам. Интересно, сколько это займет времени?

Первую часть программы выполнил. Вроде правильно подсчитал. Всего за 470 мс. 
Теперь займусь ячейкой фиксированного формата.

20140605 14:47
Вчера вечером занимался проектом, потом ночью. Потом когда проснулся. Похоже, получилось. Хотя надо бы
проверить. Загрузка и получение фиксированной ячейки осуществлялось:
загрузка 2027
дополнительный файл 458
сортировки: 617б 686б 759
слияние 1 (подсчет числа сущностей) 477
слияние 2 (формирование ячейки фиксированного формата) 3719
Суммарное время: 8.5-8.6 сек.

Выглядит неплохо. 
 
По 10 млн. общее время - 148 сек.
При повтором расчете, общее время составило 87 сек (?)
Существенно уменьшилась загрузка до 20 сек. Сканирование выполнялось 34 сек.

100 млн. триплетов, общее время 1400 сек. 
В том числе, два сканирования - 46 сек. и 570 сек.
Последние сортировки ..., 111 сек, 125 сек.

Теперь как бы проверить правильность созданного дерева?

 20140606 16:29 на работе
 Сделал 4 метода API для использования хранилища в процессах обработки. Отладил, проверил на смеси действий,
 предоставленной Лешаевым. Получилось, что 100 тыс. "операторов", т.е. элементарных доступов выпоняются за 
 5.5 сек. После перезагрузки, естественно, скорость упала - 20.8 сек. При повторном выполнении, время стало
 5.7 сек. В общем, как обычно.

 20140607 17:51
 А вот и неожиданность! Я проделал трассировку пакетом TrueRdfViewer, результаты ошеломили. Для 100 тыс.
 операторов, общее время вычисления 458 мс. !!!
 А почему?
 Сейчас повторил пропуск трассировки в RdfTrees, результат - 9.9 сек. Более, чем в 20 раз медленнее!!!

 20140608 10:57
 Сергей прислал новые данные, потестирую на них. На старых данных, по-прежнему больше 9 секунд...

 Запустил набор операторов tracing100th.xml
 Время выполнения 1237 мс.

 Для TrueRdfViewer время выполнения того же теста 340 мс.

 RdfTRees:
 Выполняю трассировку по частям. 
 spo - 81 мс. из 979
 spD - 444 мс. из 7 тыс.
 spO - 273 мс. из 459 испытаний
 Spo - 51 мс. из 250

 Полный прогон 750 мс. из 8700
 
 TrueRdfViewer:
 Выполняю трассировку по частям. 
 spo - 30 мс. из 979
 spD - 222 мс. из 7 тыс.
 spO - 120 мс. из 459 испытаний
 Spo - 34 мс. из 250

 Полный прогон 354 мс. из 8700
 
 Итак, вывод - в среднем, выполнение операторов RdfTrees происходит в 2 раза медленнее, чем TrueRdfViewer.
 Похоже, причина кроется в каких-то особенностях функционирования ячеек фиксированного формата. Пора 
 проводить дополнительные эксперименты...
   

1 миллиард триплетов.
Загрузка 3 часа 18 мин.
Дополнительный файл и сортировки 3 часа 35 мин.
Слияние 10380 сек. (3 часа?!) 2 часа 52 мин.

20140603

1М домашний компьютер
Загрузка 7.2, дополнительный файл 1.5, сортировки: 1.8, 1.9, 1.7, сканирование 21 сек.

Вернулся к RdfTrees (домашний компьютер)
Первый прогон тестов: 7845 мс. (как всегда...)
второй прогон 2017.

Теперь TrueRdfViewer
Прогон тестов 749 мс. 
второй прогон 728 мс.

Разница получилась в 2.5 раза!??

Так я и не выявил причину. Надо продолжать искать...

Попробую сфокусироваться на чем-то одном. Напр. на получении прямого свойства spO. 
Засекаю два времени.

ВНИМАНИЕ! Что-то у меня не получилось с разогревом, файл RdfTrees.cs

TrueRdfViewer spO - 729 мс., повторно 714, 722 
Похоже, это все тесты, надо выделить только spO
spO 459 тестов - 212 мс. !!!

RdfTrees spO - 761 мс.

Пожалуй, более, чем в 3 раза лучше...

20140609 16:17
Замерил сколько производится поиск по дереву. Получилось 582 мс.
То есть, это основная часть действий. 






 


 